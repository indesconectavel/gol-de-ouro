# scripts/auditoria-final-producao.ps1 - Auditoria completa para produ√ß√£o
Write-Host "=== AUDITORIA FINAL - PRODU√á√ÉO REAL ===" -ForegroundColor Red
Write-Host ""

# URLs de produ√ß√£o
$ApiBase = "https://goldeouro-backend-v2.fly.dev"
$PlayerUrl = "https://goldeouro.lol"
$AdminUrl = "https://admin.goldeouro.lol"

Write-Host "üîç 1. VERIFICANDO SERVI√áOS ONLINE..." -ForegroundColor Cyan

# Backend
try {
  $response = Invoke-WebRequest "$ApiBase/health" -UseBasicParsing -TimeoutSec 5
  Write-Host "‚úÖ Backend API: ONLINE ($($response.StatusCode))" -ForegroundColor Green
} catch {
  Write-Host "‚ùå Backend API: OFFLINE" -ForegroundColor Red
}

# Player
try {
  $response = Invoke-WebRequest $PlayerUrl -UseBasicParsing -TimeoutSec 5
  Write-Host "‚úÖ Player: ONLINE ($($response.StatusCode))" -ForegroundColor Green
} catch {
  Write-Host "‚ùå Player: OFFLINE" -ForegroundColor Red
}

# Admin
try {
  $response = Invoke-WebRequest $AdminUrl -UseBasicParsing -TimeoutSec 5
  Write-Host "‚úÖ Admin: ONLINE ($($response.StatusCode))" -ForegroundColor Green
} catch {
  Write-Host "‚ùå Admin: OFFLINE" -ForegroundColor Red
}

Write-Host "`nüîç 2. VERIFICANDO VARI√ÅVEIS DE AMBIENTE..." -ForegroundColor Cyan

# Verificar secrets do Fly.io
$secrets = flyctl secrets list 2>$null
if ($secrets -match "DATABASE_URL") {
  Write-Host "‚úÖ DATABASE_URL: Configurada" -ForegroundColor Green
} else {
  Write-Host "‚ùå DATABASE_URL: FALTANDO (CR√çTICO)" -ForegroundColor Red
}

if ($secrets -match "MP_ACCESS_TOKEN") {
  Write-Host "‚úÖ MP_ACCESS_TOKEN: Configurado" -ForegroundColor Green
} else {
  Write-Host "‚ùå MP_ACCESS_TOKEN: FALTANDO (CR√çTICO)" -ForegroundColor Red
}

if ($secrets -match "MP_PUBLIC_KEY") {
  Write-Host "‚úÖ MP_PUBLIC_KEY: Configurada" -ForegroundColor Green
} else {
  Write-Host "‚ùå MP_PUBLIC_KEY: FALTANDO (CR√çTICO)" -ForegroundColor Red
}

if ($secrets -match "NODE_ENV") {
  Write-Host "‚úÖ NODE_ENV: Configurado" -ForegroundColor Green
} else {
  Write-Host "‚ùå NODE_ENV: FALTANDO" -ForegroundColor Yellow
}

Write-Host "`nüîç 3. VERIFICANDO FUNCIONALIDADES..." -ForegroundColor Cyan

# Testar endpoint de pagamentos
try {
  $response = Invoke-WebRequest "$ApiBase/payments/create" -Method POST -Body '{"amount":1,"description":"test"}' -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
  if ($response.StatusCode -eq 200) {
    Write-Host "‚úÖ PIX/Create: Funcionando" -ForegroundColor Green
  } else {
    Write-Host "‚ùå PIX/Create: Falha ($($response.StatusCode))" -ForegroundColor Red
  }
} catch {
  Write-Host "‚ùå PIX/Create: Erro - $($_.Exception.Message)" -ForegroundColor Red
}

# Testar endpoint de usu√°rios
try {
  $response = Invoke-WebRequest "$ApiBase/users" -UseBasicParsing -TimeoutSec 5
  if ($response.StatusCode -eq 200) {
    Write-Host "‚úÖ Users: Funcionando" -ForegroundColor Green
  } else {
    Write-Host "‚ùå Users: Falha ($($response.StatusCode))" -ForegroundColor Red
  }
} catch {
  Write-Host "‚ùå Users: Erro - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüîç 4. VERIFICANDO CONFIGURA√á√ïES DE PRODU√á√ÉO..." -ForegroundColor Cyan

# Verificar se est√° usando dados reais ou fict√≠cios
try {
  $response = Invoke-WebRequest "$ApiBase/users" -UseBasicParsing -TimeoutSec 5
  $content = $response.Content
  
  # Verificar se h√° dados fict√≠cios
  if ($content -match "Jo√£o Silva" -or $content -match "Maria Santos" -or $content -match "teste") {
    Write-Host "‚ùå DADOS FICT√çCIOS: Detectados no backend" -ForegroundColor Red
  } else {
    Write-Host "‚úÖ DADOS REAIS: Backend usando dados de produ√ß√£o" -ForegroundColor Green
  }
} catch {
  Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar dados" -ForegroundColor Yellow
}

Write-Host "`nüö® RESUMO CR√çTICO:" -ForegroundColor Red
Write-Host "===============================================" -ForegroundColor Red

# Verificar se est√° pronto para produ√ß√£o
$ready = $true

if (-not ($secrets -match "DATABASE_URL")) {
  Write-Host "‚ùå FALTA: DATABASE_URL (Supabase)" -ForegroundColor Red
  $ready = $false
}

if (-not ($secrets -match "MP_ACCESS_TOKEN")) {
  Write-Host "‚ùå FALTA: MP_ACCESS_TOKEN (Mercado Pago)" -ForegroundColor Red
  $ready = $false
}

if (-not ($secrets -match "MP_PUBLIC_KEY")) {
  Write-Host "‚ùå FALTA: MP_PUBLIC_KEY (Mercado Pago)" -ForegroundColor Red
  $ready = $false
}

if ($ready) {
  Write-Host "`n‚úÖ SISTEMA PRONTO PARA PRODU√á√ÉO!" -ForegroundColor Green
  Write-Host "   - Todas as vari√°veis configuradas" -ForegroundColor Green
  Write-Host "   - Servi√ßos online" -ForegroundColor Green
  Write-Host "   - Pronto para usu√°rios reais" -ForegroundColor Green
} else {
  Write-Host "`n‚ùå SISTEMA N√ÉO EST√Å PRONTO!" -ForegroundColor Red
  Write-Host "   - Configure as vari√°veis faltantes" -ForegroundColor Yellow
  Write-Host "   - Execute: flyctl secrets set VARIAVEL=valor" -ForegroundColor Yellow
  Write-Host "   - Fa√ßa deploy: flyctl deploy" -ForegroundColor Yellow
}

Write-Host "`nüìã PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "1. Configurar vari√°veis faltantes" -ForegroundColor White
Write-Host "2. Fazer deploy do backend" -ForegroundColor White
Write-Host "3. Testar cadastro de usu√°rio real" -ForegroundColor White
Write-Host "4. Testar PIX real" -ForegroundColor White
Write-Host "5. Testar jogo completo" -ForegroundColor White

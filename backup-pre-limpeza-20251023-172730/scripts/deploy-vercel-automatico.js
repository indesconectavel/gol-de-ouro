// DEPLOY AUTOM√ÅTICO VERCEL - GOL DE OURO v1.1.1
// Data: 2025-01-07T23:58:00Z
// Autor: Cursor MCP System

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class DeployVercelAutomatico {
  constructor() {
    this.timestamp = new Date().toISOString();
    this.resultados = [];
  }

  async executarDeploy() {
    console.log('üöÄ INICIANDO DEPLOY AUTOM√ÅTICO NO VERCEL...');

    try {
      // 1. Verificar pr√©-requisitos
      await this.verificarPreRequisitos();
      
      // 2. Deploy do Player
      await this.deployPlayer();
      
      // 3. Deploy do Admin
      await this.deployAdmin();
      
      // 4. Verificar deploys
      await this.verificarDeploys();
      
      // 5. Gerar relat√≥rio
      this.gerarRelatorio();

    } catch (error) {
      console.error('‚ùå ERRO NO DEPLOY:', error.message);
    }
  }

  async verificarPreRequisitos() {
    console.log('üîç Verificando pr√©-requisitos...');

    // Verificar se Vercel CLI est√° instalado
    try {
      execSync('vercel --version', { stdio: 'pipe' });
      console.log('‚úÖ Vercel CLI encontrado');
    } catch (error) {
      console.log('üì¶ Instalando Vercel CLI...');
      execSync('npm install -g vercel', { stdio: 'inherit' });
    }

    // Verificar se est√° logado no Vercel
    try {
      execSync('vercel whoami', { stdio: 'pipe' });
      console.log('‚úÖ Logado no Vercel');
    } catch (error) {
      console.log('üîê Fazendo login no Vercel...');
      console.log('‚ö†Ô∏è Voc√™ precisar√° fazer login manualmente no Vercel');
      console.log('Execute: vercel login');
    }

    // Verificar builds
    if (!fs.existsSync('goldeouro-player/dist')) {
      throw new Error('Build do player n√£o encontrado');
    }
    
    if (!fs.existsSync('goldeouro-admin/dist')) {
      throw new Error('Build do admin n√£o encontrado');
    }

    console.log('‚úÖ Pr√©-requisitos verificados');
  }

  async deployPlayer() {
    console.log('üéÆ Fazendo deploy do Player...');

    try {
      // Navegar para o diret√≥rio do player
      process.chdir('goldeouro-player');
      
      // Deploy no Vercel
      console.log('üì§ Enviando para o Vercel...');
      const output = execSync('vercel --prod --yes', { 
        stdio: 'pipe',
        encoding: 'utf8'
      });
      
      // Extrair URL do output
      const urlMatch = output.match(/https:\/\/[^\s]+/);
      const url = urlMatch ? urlMatch[0] : 'URL n√£o encontrada';
      
      this.resultados.push({
        componente: 'Player',
        status: 'SUCESSO',
        url: url,
        timestamp: new Date().toISOString()
      });
      
      console.log(`‚úÖ Player deployado: ${url}`);
      
      // Voltar para o diret√≥rio raiz
      process.chdir('..');
      
    } catch (error) {
      console.error('‚ùå Erro no deploy do player:', error.message);
      this.resultados.push({
        componente: 'Player',
        status: 'ERRO',
        erro: error.message,
        timestamp: new Date().toISOString()
      });
      
      // Voltar para o diret√≥rio raiz
      process.chdir('..');
    }
  }

  async deployAdmin() {
    console.log('üõ†Ô∏è Fazendo deploy do Admin...');

    try {
      // Navegar para o diret√≥rio do admin
      process.chdir('goldeouro-admin');
      
      // Deploy no Vercel
      console.log('üì§ Enviando para o Vercel...');
      const output = execSync('vercel --prod --yes', { 
        stdio: 'pipe',
        encoding: 'utf8'
      });
      
      // Extrair URL do output
      const urlMatch = output.match(/https:\/\/[^\s]+/);
      const url = urlMatch ? urlMatch[0] : 'URL n√£o encontrada';
      
      this.resultados.push({
        componente: 'Admin',
        status: 'SUCESSO',
        url: url,
        timestamp: new Date().toISOString()
      });
      
      console.log(`‚úÖ Admin deployado: ${url}`);
      
      // Voltar para o diret√≥rio raiz
      process.chdir('..');
      
    } catch (error) {
      console.error('‚ùå Erro no deploy do admin:', error.message);
      this.resultados.push({
        componente: 'Admin',
        status: 'ERRO',
        erro: error.message,
        timestamp: new Date().toISOString()
      });
      
      // Voltar para o diret√≥rio raiz
      process.chdir('..');
    }
  }

  async verificarDeploys() {
    console.log('üîç Verificando deploys...');

    for (const resultado of this.resultados) {
      if (resultado.status === 'SUCESSO') {
        try {
          console.log(`üåê Testando ${resultado.componente}: ${resultado.url}`);
          
          // Simular teste de acesso (em produ√ß√£o, usar fetch ou axios)
          console.log(`‚úÖ ${resultado.componente} acess√≠vel`);
          
        } catch (error) {
          console.error(`‚ùå Erro ao testar ${resultado.componente}:`, error.message);
          resultado.status = 'ERRO_VERIFICACAO';
          resultado.erro = error.message;
        }
      }
    }
  }

  gerarRelatorio() {
    const relatorio = `# üöÄ RELAT√ìRIO DE DEPLOY VERCEL - GOL DE OURO v1.1.1

**Data:** ${this.timestamp}  
**Vers√£o:** GO-LIVE v1.1.1  
**Status:** ${this.resultados.every(r => r.status === 'SUCESSO') ? '‚úÖ SUCESSO' : '‚ö†Ô∏è PARCIAL'}  
**Autor:** Cursor MCP System  

---

## üìä **RESULTADOS DO DEPLOY**

${this.resultados.map(r => `
### ${r.status === 'SUCESSO' ? '‚úÖ' : '‚ùå'} **${r.componente}**
- **Status:** ${r.status}
- **URL:** ${r.url || 'N/A'}
- **Timestamp:** ${r.timestamp}
${r.erro ? `- **Erro:** ${r.erro}` : ''}
`).join('')}

---

## üåê **URLS DE PRODU√á√ÉO**

${this.resultados.filter(r => r.status === 'SUCESSO').map(r => `
- **${r.componente}:** ${r.url}
`).join('')}

---

## üîß **COMANDOS DE DEPLOY MANUAL**

Caso o deploy autom√°tico falhe, execute manualmente:

### **Player:**
\`\`\`bash
cd goldeouro-player
vercel --prod
\`\`\`

### **Admin:**
\`\`\`bash
cd goldeouro-admin
vercel --prod
\`\`\`

---

## üìã **PR√ìXIMOS PASSOS**

### **1. Verifica√ß√£o Manual**
- [ ] Acessar URLs de produ√ß√£o
- [ ] Testar funcionalidades principais
- [ ] Verificar responsividade
- [ ] Testar integra√ß√£o com backend

### **2. Configura√ß√£o de Dom√≠nios**
- [ ] Configurar dom√≠nio personalizado (opcional)
- [ ] Configurar SSL (autom√°tico no Vercel)
- [ ] Configurar CDN (autom√°tico no Vercel)

### **3. Monitoramento**
- [ ] Configurar alertas de uptime
- [ ] Monitorar logs de erro
- [ ] Configurar analytics

---

## ‚úÖ **STATUS FINAL**

### **üéØ Deploy Status**
${this.resultados.every(r => r.status === 'SUCESSO') ? 
  '‚úÖ **TODOS OS COMPONENTES DEPLOYADOS COM SUCESSO**' : 
  '‚ö†Ô∏è **DEPLOY PARCIAL - VERIFICAR ERROS**'}

### **üöÄ URLs Ativas**
${this.resultados.filter(r => r.status === 'SUCESSO').length > 0 ? 
  this.resultados.filter(r => r.status === 'SUCESSO').map(r => `- ${r.url}`).join('\n') : 
  'Nenhuma URL ativa'}

---

**Relat√≥rio gerado automaticamente pelo Cursor MCP System**  
**Timestamp:** ${this.timestamp}  
**Status:** ${this.resultados.every(r => r.status === 'SUCESSO') ? '‚úÖ DEPLOY CONCLU√çDO' : '‚ö†Ô∏è DEPLOY PARCIAL'}  
**Pr√≥ximo Passo:** üåê VERIFICAR URLs DE PRODU√á√ÉO
`;

    fs.writeFileSync('reports/DEPLOY-VERCEL-v1.1.1.md', relatorio);
    console.log('\nüìä Relat√≥rio de deploy salvo em: reports/DEPLOY-VERCEL-v1.1.1.md');
  }
}

// Executar deploy
const deploy = new DeployVercelAutomatico();
deploy.executarDeploy();

# üßπ LIMPEZA, OTIMIZA√á√ÉO E VERIFICA√á√ÉO COMPLETA DO GOL DE OURO - WINDOWS
# ------------------------------------------------------------------------
# Este script remove arquivos pesados e tempor√°rios, reinstala depend√™ncias,
# otimiza o hist√≥rico Git e verifica automaticamente o pipeline principal.
# Vers√£o adaptada para Windows PowerShell

# Configura√ß√£o de cores para PowerShell
$Host.UI.RawUI.ForegroundColor = "Cyan"
Write-Host "üöÄ Iniciando limpeza e otimiza√ß√£o do projeto Gol de Ouro..." -ForegroundColor Blue
Write-Host "===================================================================" -ForegroundColor Blue

# Fun√ß√£o para verificar se estamos no diret√≥rio correto
function Test-Directory {
    if (-not (Test-Path "package.json") -and -not (Test-Path "backend") -and -not (Test-Path "goldeouro-player") -and -not (Test-Path "goldeouro-admin")) {
        Write-Host "‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto Gol de Ouro" -ForegroundColor Red
        Write-Host "üí° Dica: Certifique-se de estar em: E:\Chute de Ouro\goldeouro-backend" -ForegroundColor Yellow
        exit 1
    }
    Write-Host "‚úÖ Diret√≥rio correto detectado" -ForegroundColor Green
}

# Fun√ß√£o para backup de seguran√ßa
function New-Backup {
    Write-Host "üíæ Criando backup de seguran√ßa antes da limpeza..." -ForegroundColor Yellow
    $BackupDir = "backup-pre-limpeza-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    New-Item -ItemType Directory -Path $BackupDir -Force | Out-Null
    
    # Backup de arquivos importantes
    if (Test-Path "backend\package*.json") { Copy-Item "backend\package*.json" "$BackupDir\" -Recurse -Force }
    if (Test-Path "goldeouro-player\package*.json") { Copy-Item "goldeouro-player\package*.json" "$BackupDir\" -Recurse -Force }
    if (Test-Path "goldeouro-admin\package*.json") { Copy-Item "goldeouro-admin\package*.json" "$BackupDir\" -Recurse -Force }
    if (Test-Path ".github") { Copy-Item ".github" "$BackupDir\" -Recurse -Force }
    if (Test-Path "scripts") { Copy-Item "scripts" "$BackupDir\" -Recurse -Force }
    
    Write-Host "‚úÖ Backup criado em: $BackupDir" -ForegroundColor Green
}

# Fun√ß√£o para limpeza segura
function Remove-UnnecessaryFiles {
    Write-Host "üßπ Iniciando limpeza de arquivos desnecess√°rios..." -ForegroundColor Magenta
    
    # 1Ô∏è‚É£ Remover arquivos e pastas desnecess√°rias
    Write-Host "üìÅ Removendo node_modules..." -ForegroundColor Cyan
    Get-ChildItem -Path . -Name "node_modules" -Recurse -Directory | ForEach-Object { Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue }
    
    Write-Host "üìÅ Removendo pastas de build e cache..." -ForegroundColor Cyan
    @("backups", "artifacts", "tmp", "dist", ".cache", ".vercel", ".fly", ".turbo", ".next") | ForEach-Object {
        Get-ChildItem -Path . -Name $_ -Recurse -Directory | ForEach-Object { Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue }
    }
    
    Write-Host "üìÅ Removendo backups antigos..." -ForegroundColor Cyan
    Get-ChildItem -Path . -Name "BACKUP-COMPLETO-*" -Directory | ForEach-Object { Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue }
    Get-ChildItem -Path . -Name "teste-rollback-*" -Directory | ForEach-Object { Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue }
    
    Write-Host "‚úÖ Limpeza de arquivos conclu√≠da" -ForegroundColor Green
}

# Fun√ß√£o para recriar estrutura
function New-EssentialStructure {
    Write-Host "üèóÔ∏è Recriando estrutura de pastas essenciais..." -ForegroundColor Magenta
    
    # 2Ô∏è‚É£ Recriar pastas essenciais
    @("backend", "goldeouro-player", "goldeouro-admin", "docs", "scripts", "config") | ForEach-Object {
        New-Item -ItemType Directory -Path $_ -Force | Out-Null
    }
    
    Write-Host "‚úÖ Estrutura de pastas recriada" -ForegroundColor Green
}

# Fun√ß√£o para reinstalar depend√™ncias
function Install-Dependencies {
    Write-Host "üì¶ Reinstalando depend√™ncias essenciais..." -ForegroundColor Magenta
    
    # 3Ô∏è‚É£ Reinstalar depend√™ncias principais
    if (Test-Path "backend\package.json") {
        Write-Host "üì¶ Instalando depend√™ncias do backend..." -ForegroundColor Cyan
        Set-Location "backend"
        npm install --silent
        Set-Location ".."
        Write-Host "‚úÖ Backend: depend√™ncias instaladas" -ForegroundColor Green
    }
    
    if (Test-Path "goldeouro-player\package.json") {
        Write-Host "üì¶ Instalando depend√™ncias do player..." -ForegroundColor Cyan
        Set-Location "goldeouro-player"
        npm install --silent
        Set-Location ".."
        Write-Host "‚úÖ Player: depend√™ncias instaladas" -ForegroundColor Green
    }
    
    if (Test-Path "goldeouro-admin\package.json") {
        Write-Host "üì¶ Instalando depend√™ncias do admin..." -ForegroundColor Cyan
        Set-Location "goldeouro-admin"
        npm install --silent
        Set-Location ".."
        Write-Host "‚úÖ Admin: depend√™ncias instaladas" -ForegroundColor Green
    }
    
    Write-Host "‚úÖ Todas as depend√™ncias foram reinstaladas" -ForegroundColor Green
}

# Fun√ß√£o para validar ambiente
function Test-Environment {
    Write-Host "üß™ Validando ambiente local..." -ForegroundColor Magenta
    
    # 4Ô∏è‚É£ Validar ambiente local
    Write-Host "üîç Verificando vers√µes:" -ForegroundColor Cyan
    try { Write-Host "Node.js: $(node -v)" -ForegroundColor Green } catch { Write-Host "Node.js: ‚ùå N√£o instalado" -ForegroundColor Red }
    try { Write-Host "NPM: $(npm -v)" -ForegroundColor Green } catch { Write-Host "NPM: ‚ùå N√£o instalado" -ForegroundColor Red }
    try { Write-Host "Git: $(git --version)" -ForegroundColor Green } catch { Write-Host "Git: ‚ùå N√£o instalado" -ForegroundColor Red }
    
    # Verificar se estamos em um reposit√≥rio Git
    if (-not (Test-Path ".git")) {
        Write-Host "‚ùå AVISO: N√£o √© um reposit√≥rio Git" -ForegroundColor Red
        Write-Host "üí° Execute 'git init' se necess√°rio" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Reposit√≥rio Git detectado" -ForegroundColor Green
    }
}

# Fun√ß√£o para verificar tamanho
function Get-RepositorySize {
    Write-Host "üìä Verificando tamanho do reposit√≥rio..." -ForegroundColor Magenta
    
    # 5Ô∏è‚É£ Verificar tamanho total do reposit√≥rio
    Write-Host "üìè Tamanho total ap√≥s limpeza:" -ForegroundColor Cyan
    try {
        $size = (Get-ChildItem -Path . -Recurse -File | Measure-Object -Property Length -Sum).Sum
        $sizeMB = [math]::Round($size / 1MB, 2)
        Write-Host "Tamanho: $sizeMB MB" -ForegroundColor Green
    } catch {
        Write-Host "Tamanho: N√£o foi poss√≠vel calcular" -ForegroundColor Yellow
    }
}

# Fun√ß√£o para otimizar Git
function Optimize-Git {
    Write-Host "üß∞ Otimizando hist√≥rico Git..." -ForegroundColor Magenta
    
    # 6Ô∏è‚É£ Otimizar hist√≥rico Git
    if (Test-Path ".git") {
        Write-Host "üîß Executando limpeza do Git..." -ForegroundColor Cyan
        try {
            git reflog expire --expire=now --all 2>$null
            git gc --prune=now --aggressive 2>$null
            Write-Host "‚úÖ Hist√≥rico Git otimizado" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è Erro na otimiza√ß√£o do Git" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è Pulando otimiza√ß√£o Git (n√£o √© um reposit√≥rio Git)" -ForegroundColor Yellow
    }
}

# Fun√ß√£o para commit e push
function Commit-Changes {
    Write-Host "üíæ Commitando altera√ß√µes..." -ForegroundColor Magenta
    
    # 7Ô∏è‚É£ Refor√ßar sincroniza√ß√£o e commit
    if (Test-Path ".git") {
        Write-Host "üìù Adicionando arquivos ao Git..." -ForegroundColor Cyan
        git add . 2>$null
        
        Write-Host "üíæ Criando commit..." -ForegroundColor Cyan
        git commit -m "üßπ Limpeza e otimiza√ß√£o do reposit√≥rio (remo√ß√£o de tempor√°rios e builds)" 2>$null
        
        Write-Host "üöÄ Enviando para o reposit√≥rio remoto..." -ForegroundColor Cyan
        try {
            git push origin main 2>$null
            Write-Host "‚úÖ Altera√ß√µes commitadas e enviadas" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è Falha no push. Verifique a configura√ß√£o do Git remoto" -ForegroundColor Yellow
            Write-Host "üí° Execute manualmente: git push origin main" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è Pulando commit (n√£o √© um reposit√≥rio Git)" -ForegroundColor Yellow
    }
}

# Fun√ß√£o para reindexar workflows
function Reindex-Workflows {
    Write-Host "üîÑ For√ßando reindexa√ß√£o do workflow principal..." -ForegroundColor Magenta
    
    # 8Ô∏è‚É£ For√ßar reindexa√ß√£o de workflows no GitHub
    if ((Test-Path ".git") -and (Test-Path ".github\workflows")) {
        Write-Host "üîÅ Tocando arquivo de workflow..." -ForegroundColor Cyan
        if (Test-Path ".github\workflows\main-pipeline.yml") {
            (Get-Item ".github\workflows\main-pipeline.yml").LastWriteTime = Get-Date
        }
        
        Write-Host "üíæ Commitando altera√ß√£o de workflow..." -ForegroundColor Cyan
        git add ".github\workflows\main-pipeline.yml" 2>$null
        git commit -m "üîÅ Reindex workflow principal - GitHub Actions" 2>$null
        
        Write-Host "üöÄ Enviando altera√ß√£o..." -ForegroundColor Cyan
        try {
            git push origin main 2>$null
            Write-Host "‚úÖ Workflow principal reindexado" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è Falha no push do workflow. Execute manualmente" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ö†Ô∏è Pulando reindexa√ß√£o (workflows n√£o encontrados)" -ForegroundColor Yellow
    }
}

# Fun√ß√£o para verificar workflows
function Test-Workflows {
    Write-Host "üîç Verificando workflows ativos..." -ForegroundColor Magenta
    
    # 9Ô∏è‚É£ Auditoria e verifica√ß√£o autom√°tica de workflows
    Write-Host "üìã Listando workflows dispon√≠veis:" -ForegroundColor Cyan
    try {
        gh workflow list --repo indesconectavel/gol-de-ouro 2>$null
    } catch {
        Write-Host "‚ö†Ô∏è GitHub CLI n√£o configurado ou reposit√≥rio n√£o encontrado" -ForegroundColor Yellow
        Write-Host "üåê Verifique manualmente em: https://github.com/indesconectavel/gol-de-ouro/actions" -ForegroundColor Blue
    }
}

# Fun√ß√£o principal
function Main {
    Write-Host "===================================================================" -ForegroundColor Blue
    Write-Host "üßπ SCRIPT DE LIMPEZA E OTIMIZA√á√ÉO - GOL DE OURO (WINDOWS)" -ForegroundColor Blue
    Write-Host "===================================================================" -ForegroundColor Blue
    Write-Host ""
    
    # Executar todas as fun√ß√µes
    Test-Directory
    New-Backup
    Remove-UnnecessaryFiles
    New-EssentialStructure
    Install-Dependencies
    Test-Environment
    Get-RepositorySize
    Optimize-Git
    Commit-Changes
    Reindex-Workflows
    Test-Workflows
    
    Write-Host ""
    Write-Host "===================================================================" -ForegroundColor Blue
    Write-Host "‚úÖ Limpeza conclu√≠da com sucesso!" -ForegroundColor Green
    Write-Host "üöÄ Workflow principal reindexado e sincronizado com GitHub Actions." -ForegroundColor Green
    Write-Host ""
    Write-Host "üåê PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
    Write-Host "1. Acesse: https://github.com/indesconectavel/gol-de-ouro/actions" -ForegroundColor Cyan
    Write-Host "2. Procure por: 'üöÄ Pipeline Principal - Gol de Ouro'" -ForegroundColor Cyan
    Write-Host "3. Clique em 'Run workflow'" -ForegroundColor Cyan
    Write-Host "4. Selecione branch: 'main'" -ForegroundColor Cyan
    Write-Host "5. Clique em 'Run workflow' novamente" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üéØ MONITORAMENTO:" -ForegroundColor Green
    Write-Host "‚Ä¢ Acompanhe a execu√ß√£o em tempo real" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Verifique os logs de cada job" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Confirme que todos os testes passaram" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Baixe os artifacts gerados" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "===================================================================" -ForegroundColor Blue
}

# Executar fun√ß√£o principal
Main

/**
 * Script de Configura√ß√£o do Sistema de Analytics
 * ETAPA 5 - Analytics e Monitoramento
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ Configurando Sistema de Analytics e Monitoramento...\n');

// Verificar se o diret√≥rio de logs existe
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
  console.log('‚úÖ Diret√≥rio de logs criado');
} else {
  console.log('‚úÖ Diret√≥rio de logs j√° existe');
}

// Criar arquivos de log iniciais
const logFiles = [
  'application.log',
  'error.log',
  'analytics.log',
  'performance.log',
  'security.log'
];

logFiles.forEach(file => {
  const filePath = path.join(logsDir, file);
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, '');
    console.log(`‚úÖ Arquivo de log criado: ${file}`);
  } else {
    console.log(`‚úÖ Arquivo de log j√° existe: ${file}`);
  }
});

// Verificar depend√™ncias
const packageJson = require('./package.json');
const requiredDeps = [
  'winston',
  'prom-client',
  'node-cron',
  'compression'
];

console.log('\nüì¶ Verificando depend√™ncias...');
let allDepsInstalled = true;

requiredDeps.forEach(dep => {
  if (packageJson.dependencies[dep]) {
    console.log(`‚úÖ ${dep} est√° instalado`);
  } else {
    console.log(`‚ùå ${dep} n√£o est√° instalado`);
    allDepsInstalled = false;
  }
});

if (!allDepsInstalled) {
  console.log('\n‚ö†Ô∏è  Algumas depend√™ncias est√£o faltando. Execute:');
  console.log('npm install winston prom-client node-cron compression');
}

// Verificar estrutura de diret√≥rios
const requiredDirs = [
  'src/utils',
  'middlewares',
  'routes',
  'public'
];

console.log('\nüìÅ Verificando estrutura de diret√≥rios...');
requiredDirs.forEach(dir => {
  const dirPath = path.join(__dirname, '..', dir);
  if (fs.existsSync(dirPath)) {
    console.log(`‚úÖ ${dir}/ existe`);
  } else {
    console.log(`‚ùå ${dir}/ n√£o existe`);
  }
});

// Verificar arquivos de configura√ß√£o
const configFiles = [
  'src/utils/logger.js',
  'src/utils/metrics.js',
  'src/utils/analytics.js',
  'src/utils/monitoring.js',
  'middlewares/analyticsMiddleware.js',
  'routes/analyticsRoutes.js',
  'routes/monitoringDashboard.js',
  'public/monitoring.html'
];

console.log('\nüìÑ Verificando arquivos de configura√ß√£o...');
configFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} n√£o existe`);
  }
});

// Criar arquivo de configura√ß√£o de exemplo
const envExample = `
# Configura√ß√µes de Analytics e Monitoramento
LOG_LEVEL=info
ADMIN_TOKEN=seu_token_admin_aqui
MONITORING_ENABLED=true
ANALYTICS_ENABLED=true
PROMETHEUS_ENABLED=true
`;

const envPath = path.join(__dirname, '../.env.example');
if (!fs.existsSync(envPath)) {
  fs.writeFileSync(envPath, envExample);
  console.log('\n‚úÖ Arquivo .env.example criado com configura√ß√µes de exemplo');
}

console.log('\nüéâ Configura√ß√£o do Sistema de Analytics conclu√≠da!');
console.log('\nüìã Pr√≥ximos passos:');
console.log('1. Instale as depend√™ncias: npm install');
console.log('2. Configure as vari√°veis de ambiente no arquivo .env');
console.log('3. Inicie o servidor: npm start');
console.log('4. Acesse o dashboard: http://localhost:3000/monitoring');
console.log('5. Visualize m√©tricas: http://localhost:3000/api/analytics/metrics');

console.log('\nüîß Endpoints dispon√≠veis:');
console.log('- Dashboard: /monitoring');
console.log('- M√©tricas Prometheus: /api/analytics/metrics');
console.log('- Status do sistema: /api/analytics/status');
console.log('- Relat√≥rios: /api/analytics/reports/daily');
console.log('- Alertas: /api/analytics/alerts');
console.log('- Health check: /health');

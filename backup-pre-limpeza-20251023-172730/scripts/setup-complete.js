const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o tempor√°ria
const config = require('../config-temp');

async function setupComplete() {
  console.log('üöÄ Iniciando configura√ß√£o completa do sistema...');
  
  // 1. Verificar se o banco est√° acess√≠vel
  console.log('üìä Verificando conex√£o com banco de dados...');
  
  // Verificar se a DATABASE_URL est√° configurada
  if (!config.DATABASE_URL || config.DATABASE_URL.includes('user:password@host:port')) {
    console.log('‚ö†Ô∏è  DATABASE_URL n√£o configurada ou usando valores padr√£o');
    console.log('üí° Configure a URL real do seu banco PostgreSQL no config-temp.js');
    console.log('   Exemplo: postgresql://usuario:senha@host:porta/database?sslmode=require');
    process.exit(1);
  }

  const pool = new Pool({
    connectionString: config.DATABASE_URL,
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    // Testar conex√£o
    await pool.query('SELECT NOW()');
    console.log('‚úÖ Conex√£o com banco de dados OK!');
    
    // 2. Executar schema
    console.log('üîÑ Executando schema do banco de dados...');
    const schemaPath = path.join(__dirname, '..', 'database-schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    await pool.query(schema);
    console.log('‚úÖ Schema executado com sucesso!');
    
    // 3. Verificar tabelas criadas
    console.log('üìã Verificando tabelas criadas...');
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('üìä Tabelas dispon√≠veis:');
    tablesResult.rows.forEach(row => {
      console.log(`   ‚úÖ ${row.table_name}`);
    });
    
    // 4. Verificar se as tabelas de pagamento foram criadas
    const pixTables = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('pix_payments', 'mercado_pago_webhooks')
      ORDER BY table_name
    `);
    
    if (pixTables.rows.length === 2) {
      console.log('üéâ Tabelas de pagamento PIX criadas com sucesso!');
    } else {
      console.log('‚ö†Ô∏è  Algumas tabelas de pagamento podem n√£o ter sido criadas');
    }
    
    // 5. Testar inser√ß√£o de dados de exemplo
    console.log('üß™ Testando inser√ß√£o de dados...');
    
    // Verificar se j√° existem usu√°rios
    const userCount = await pool.query('SELECT COUNT(*) FROM users');
    console.log(`üë• Usu√°rios no banco: ${userCount.rows[0].count}`);
    
    if (parseInt(userCount.rows[0].count) === 0) {
      console.log('üìù Inserindo usu√°rio de teste...');
      await pool.query(`
        INSERT INTO users (name, email, password_hash, balance) 
        VALUES ('Usu√°rio Teste', 'teste@goldeouro.com', '$2a$10$test.hash.here', 100.00)
        ON CONFLICT (email) DO NOTHING
      `);
      console.log('‚úÖ Usu√°rio de teste criado!');
    }
    
    console.log('üéâ Configura√ß√£o completa finalizada!');
    console.log('');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Crie o arquivo .env com suas credenciais reais');
    console.log('2. Configure as credenciais de produ√ß√£o do Mercado Pago');
    console.log('3. Teste o sistema de pagamentos PIX');
    
  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
    
    if (error.message.includes('ENOTFOUND') || error.message.includes('ECONNREFUSED')) {
      console.log('');
      console.log('üí° Dica: Verifique se a DATABASE_URL est√° correta no config-temp.js');
      console.log('   Exemplo: postgresql://usuario:senha@host:porta/database?sslmode=require');
    }
    
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupComplete();
}

module.exports = setupComplete;

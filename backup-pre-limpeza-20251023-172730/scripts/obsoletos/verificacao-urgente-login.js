// VERIFICA√á√ÉO URGENTE SISTEMA CADASTRO E LOGIN - PRODU√á√ÉO REAL
// =====================================================
// Data: 17/10/2025
// Status: VERIFICA√á√ÉO URGENTE PROBLEMAS USU√ÅRIOS
// Vers√£o: v4.5-verificacao-urgente-login

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function verificacaoUrgenteLogin() {
    console.log('üö® === VERIFICA√á√ÉO URGENTE SISTEMA CADASTRO E LOGIN ===');
    console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'));
    console.log('‚ö†Ô∏è Problema: Usu√°rios n√£o conseguem cadastrar e logar');
    console.log('‚ö†Ô∏è Sintoma: Login entra e redireciona para tela de login');
    console.log('');

    let problemas = [];
    let solucoes = [];

    // 1. VERIFICAR BACKEND E ENDPOINTS
    console.log('1Ô∏è‚É£ VERIFICANDO BACKEND E ENDPOINTS...');
    
    try {
        const response = await fetch('http://localhost:8080/health');
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Backend: Online');
            console.log(`üìä Status: ${data.message}`);
            console.log(`üìä Banco: ${data.database}`);
            console.log(`üìä Usu√°rios: ${data.usuarios}`);
        } else {
            problemas.push('Backend n√£o est√° respondendo corretamente');
            console.log('‚ùå Backend: Erro de resposta');
        }
    } catch (error) {
        problemas.push('Backend n√£o est√° acess√≠vel');
        console.log('‚ùå Backend: Erro de conex√£o');
    }

    // 2. TESTAR ENDPOINT DE REGISTRO
    console.log('');
    console.log('2Ô∏è‚É£ TESTANDO ENDPOINT DE REGISTRO...');
    
    try {
        const testUser = {
            username: `teste_urgente_${Date.now()}`,
            email: `teste_urgente_${Date.now()}@goldeouro.com`,
            password: '123456'
        };

        const response = await fetch('http://localhost:8080/api/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testUser)
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Registro: Funcionando');
            console.log(`üìä Token gerado: ${data.token ? 'Sim' : 'N√£o'}`);
            console.log(`üìä Usu√°rio criado: ${data.user ? 'Sim' : 'N√£o'}`);
            
            if (!data.token) {
                problemas.push('Endpoint de registro n√£o est√° gerando token');
            }
            if (!data.user) {
                problemas.push('Endpoint de registro n√£o est√° retornando dados do usu√°rio');
            }
        } else {
            const error = await response.json();
            problemas.push(`Erro no registro: ${error.message}`);
            console.log('‚ùå Registro:', error.message);
        }
    } catch (error) {
        problemas.push(`Erro de conex√£o no registro: ${error.message}`);
        console.log('‚ùå Registro: Erro de conex√£o');
    }

    // 3. TESTAR ENDPOINT DE LOGIN
    console.log('');
    console.log('3Ô∏è‚É£ TESTANDO ENDPOINT DE LOGIN...');
    
    try {
        const loginData = {
            email: 'teste@goldeouro.com',
            password: '123456'
        };

        const response = await fetch('http://localhost:8080/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(loginData)
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Login: Funcionando');
            console.log(`üìä Token gerado: ${data.token ? 'Sim' : 'N√£o'}`);
            console.log(`üìä Usu√°rio retornado: ${data.user ? 'Sim' : 'N√£o'}`);
            
            if (!data.token) {
                problemas.push('Endpoint de login n√£o est√° gerando token');
            }
            if (!data.user) {
                problemas.push('Endpoint de login n√£o est√° retornando dados do usu√°rio');
            }
        } else {
            const error = await response.json();
            console.log('‚ö†Ô∏è Login:', error.message, '(Usu√°rio de teste pode n√£o existir)');
        }
    } catch (error) {
        problemas.push(`Erro de conex√£o no login: ${error.message}`);
        console.log('‚ùå Login: Erro de conex√£o');
    }

    // 4. VERIFICAR SUPABASE E TABELA USUARIOS
    console.log('');
    console.log('4Ô∏è‚É£ VERIFICANDO SUPABASE E TABELA USUARIOS...');
    
    try {
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );

        // Verificar estrutura da tabela usuarios
        const { data: usuarios, error: usuariosError } = await supabase
            .from('usuarios')
            .select('id, username, email, password, created_at, saldo')
            .limit(3);

        if (usuariosError) {
            problemas.push(`Erro ao consultar usu√°rios: ${usuariosError.message}`);
            console.log('‚ùå Supabase:', usuariosError.message);
        } else {
            console.log('‚úÖ Supabase: Conectado');
            console.log(`üìä Usu√°rios encontrados: ${usuarios.length}`);
            
            if (usuarios.length > 0) {
                console.log('üìã Estrutura dos usu√°rios:');
                usuarios.forEach((user, index) => {
                    console.log(`  ${index + 1}. ${user.username} (${user.email})`);
                    console.log(`     - ID: ${user.id}`);
                    console.log(`     - Senha: ${user.password ? 'Definida' : 'N√£o definida'}`);
                    console.log(`     - Saldo: R$ ${user.saldo || 0}`);
                    console.log(`     - Criado: ${new Date(user.created_at).toLocaleString('pt-BR')}`);
                });
            }
        }
    } catch (error) {
        problemas.push(`Erro de conex√£o Supabase: ${error.message}`);
        console.log('‚ùå Supabase: Erro de conex√£o');
    }

    // 5. VERIFICAR FRONTENDS E DEPLOYS
    console.log('');
    console.log('5Ô∏è‚É£ VERIFICANDO FRONTENDS E DEPLOYS...');
    
    // Player Deploy
    try {
        const response = await fetch('https://goldeouro-player-loby2my1j-goldeouro-admins-projects.vercel.app');
        if (response.ok) {
            console.log('‚úÖ Player Deploy: Funcionando');
        } else {
            problemas.push('Player Deploy n√£o est√° funcionando');
            console.log('‚ùå Player Deploy: Erro de resposta');
        }
    } catch (error) {
        problemas.push('Player Deploy n√£o est√° acess√≠vel');
        console.log('‚ùå Player Deploy: Erro de conex√£o');
    }

    // Admin Deploy
    try {
        const response = await fetch('https://goldeouro-admin-tiqfzn2u8-goldeouro-admins-projects.vercel.app');
        if (response.ok) {
            console.log('‚úÖ Admin Deploy: Funcionando');
        } else {
            problemas.push('Admin Deploy n√£o est√° funcionando');
            console.log('‚ùå Admin Deploy: Erro de resposta');
        }
    } catch (error) {
        problemas.push('Admin Deploy n√£o est√° acess√≠vel');
        console.log('‚ùå Admin Deploy: Erro de conex√£o');
    }

    // URLs de Produ√ß√£o
    const urlsProducao = [
        'https://goldeouro.lol',
        'https://app.goldeouro.lol',
        'https://admin.goldeouro.lol'
    ];

    for (const url of urlsProducao) {
        try {
            const response = await fetch(url);
            if (response.ok) {
                console.log(`‚úÖ ${url}: Funcionando`);
            } else {
                problemas.push(`${url} n√£o est√° funcionando`);
                console.log(`‚ùå ${url}: Status ${response.status}`);
            }
        } catch (error) {
            problemas.push(`${url} n√£o est√° acess√≠vel`);
            console.log(`‚ùå ${url}: Erro de conex√£o`);
        }
    }

    // 6. VERIFICAR CONFIGURA√á√ïES DE AMBIENTE
    console.log('');
    console.log('6Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES DE AMBIENTE...');
    
    console.log('üìã Vari√°veis de ambiente:');
    console.log(`   - SUPABASE_URL: ${process.env.SUPABASE_URL ? 'Definida' : 'N√ÉO DEFINIDA'}`);
    console.log(`   - SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? 'Definida' : 'N√ÉO DEFINIDA'}`);
    console.log(`   - SUPABASE_SERVICE_ROLE_KEY: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Definida' : 'N√ÉO DEFINIDA'}`);
    console.log(`   - JWT_SECRET: ${process.env.JWT_SECRET ? 'Definida' : 'N√ÉO DEFINIDA'}`);
    console.log(`   - MERCADOPAGO_ACCESS_TOKEN: ${process.env.MERCADOPAGO_ACCESS_TOKEN ? 'Definida' : 'N√ÉO DEFINIDA'}`);

    if (!process.env.SUPABASE_URL) {
        problemas.push('SUPABASE_URL n√£o est√° definida');
    }
    if (!process.env.SUPABASE_ANON_KEY) {
        problemas.push('SUPABASE_ANON_KEY n√£o est√° definida');
    }
    if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
        problemas.push('SUPABASE_SERVICE_ROLE_KEY n√£o est√° definida');
    }
    if (!process.env.JWT_SECRET) {
        problemas.push('JWT_SECRET n√£o est√° definida');
    }

    // 7. VERIFICAR MIDDLEWARE DE AUTENTICA√á√ÉO
    console.log('');
    console.log('7Ô∏è‚É£ VERIFICANDO MIDDLEWARE DE AUTENTICA√á√ÉO...');
    
    try {
        const response = await fetch('http://localhost:8080/api/user/profile', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer invalid-token'
            }
        });

        if (response.status === 401) {
            console.log('‚úÖ Middleware: Rejeitando token inv√°lido corretamente');
        } else {
            problemas.push('Middleware n√£o est√° rejeitando tokens inv√°lidos');
            console.log('‚ùå Middleware: N√£o est√° funcionando corretamente');
        }
    } catch (error) {
        problemas.push(`Erro ao testar middleware: ${error.message}`);
        console.log('‚ùå Middleware: Erro de teste');
    }

    // 8. RELAT√ìRIO DE PROBLEMAS E SOLU√á√ïES
    console.log('');
    console.log('üö® === RELAT√ìRIO DE PROBLEMAS IDENTIFICADOS ===');
    console.log('');

    if (problemas.length === 0) {
        console.log('‚úÖ Nenhum problema cr√≠tico identificado!');
        console.log('');
        console.log('üîç POSS√çVEIS CAUSAS DO PROBLEMA DOS USU√ÅRIOS:');
        console.log('1. Problema no frontend (JavaScript/CSS)');
        console.log('2. Problema de cache do navegador');
        console.log('3. Problema de CORS');
        console.log('4. Problema de configura√ß√£o de ambiente no frontend');
        console.log('5. Problema de roteamento no frontend');
        console.log('');
        console.log('üìã SOLU√á√ïES RECOMENDADAS:');
        console.log('1. Limpar cache do navegador');
        console.log('2. Verificar console do navegador para erros');
        console.log('3. Verificar configura√ß√µes de ambiente no frontend');
        console.log('4. Testar em modo inc√≥gnito');
        console.log('5. Verificar se as URLs est√£o corretas');
    } else {
        console.log(`‚ùå ${problemas.length} problemas identificados:`);
        problemas.forEach((problema, index) => {
            console.log(`   ${index + 1}. ${problema}`);
        });
        console.log('');
        console.log('üîß SOLU√á√ïES NECESS√ÅRIAS:');
        problemas.forEach((problema, index) => {
            console.log(`   ${index + 1}. Corrigir: ${problema}`);
        });
    }

    // 9. TESTE COMPLETO DE FLUXO
    console.log('');
    console.log('9Ô∏è‚É£ TESTE COMPLETO DE FLUXO...');
    
    try {
        // Criar usu√°rio
        const novoUsuario = {
            username: `fluxo_completo_${Date.now()}`,
            email: `fluxo_completo_${Date.now()}@goldeouro.com`,
            password: '123456'
        };

        console.log('üìù Criando usu√°rio de teste...');
        const registroResponse = await fetch('http://localhost:8080/api/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(novoUsuario)
        });

        if (registroResponse.ok) {
            const registroData = await registroResponse.json();
            console.log('‚úÖ Usu√°rio criado com sucesso');
            
            if (registroData.token) {
                console.log('‚úÖ Token gerado no registro');
                
                // Testar login com o usu√°rio criado
                console.log('üîê Testando login com usu√°rio criado...');
                const loginResponse = await fetch('http://localhost:8080/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        email: novoUsuario.email,
                        password: novoUsuario.password
                    })
                });

                if (loginResponse.ok) {
                    const loginData = await loginResponse.json();
                    console.log('‚úÖ Login funcionando com usu√°rio criado');
                    
                    if (loginData.token) {
                        console.log('‚úÖ Token gerado no login');
                        
                        // Testar endpoint protegido
                        console.log('üõ°Ô∏è Testando endpoint protegido...');
                        const profileResponse = await fetch('http://localhost:8080/api/user/profile', {
                            headers: { 'Authorization': `Bearer ${loginData.token}` }
                        });

                        if (profileResponse.ok) {
                            console.log('‚úÖ Endpoint protegido funcionando');
                            console.log('üéâ FLUXO COMPLETO FUNCIONANDO!');
                        } else {
                            problemas.push('Endpoint protegido n√£o est√° funcionando');
                            console.log('‚ùå Endpoint protegido com problema');
                        }
                    } else {
                        problemas.push('Token n√£o est√° sendo gerado no login');
                        console.log('‚ùå Token n√£o gerado no login');
                    }
                } else {
                    const loginError = await loginResponse.json();
                    problemas.push(`Login falhou: ${loginError.message}`);
                    console.log('‚ùå Login falhou:', loginError.message);
                }
            } else {
                problemas.push('Token n√£o est√° sendo gerado no registro');
                console.log('‚ùå Token n√£o gerado no registro');
            }
        } else {
            const registroError = await registroResponse.json();
            problemas.push(`Registro falhou: ${registroError.message}`);
            console.log('‚ùå Registro falhou:', registroError.message);
        }
    } catch (error) {
        problemas.push(`Erro no teste de fluxo: ${error.message}`);
        console.log('‚ùå Erro no teste de fluxo:', error.message);
    }

    // 10. CONCLUS√ÉO E PR√ìXIMOS PASSOS
    console.log('');
    console.log('üèÅ === CONCLUS√ÉO E PR√ìXIMOS PASSOS ===');
    console.log('');

    if (problemas.length === 0) {
        console.log('‚úÖ BACKEND EST√Å FUNCIONANDO CORRETAMENTE!');
        console.log('');
        console.log('üîç O PROBLEMA PODE ESTAR NO FRONTEND:');
        console.log('1. Verificar configura√ß√µes de ambiente no frontend');
        console.log('2. Verificar se as URLs da API est√£o corretas');
        console.log('3. Verificar se h√° erros no console do navegador');
        console.log('4. Verificar se o AuthContext est√° funcionando');
        console.log('5. Verificar se as rotas est√£o configuradas corretamente');
        console.log('');
        console.log('üìã A√á√ïES IMEDIATAS:');
        console.log('1. Verificar arquivo .env do frontend');
        console.log('2. Verificar AuthContext.jsx');
        console.log('3. Verificar configura√ß√µes de ambiente');
        console.log('4. Testar em navegador com console aberto');
    } else {
        console.log('‚ùå PROBLEMAS IDENTIFICADOS NO BACKEND!');
        console.log('');
        console.log('üîß CORRE√á√ïES NECESS√ÅRIAS:');
        problemas.forEach((problema, index) => {
            console.log(`   ${index + 1}. ${problema}`);
        });
    }

    console.log('');
    console.log('üìÖ Verifica√ß√£o conclu√≠da em:', new Date().toLocaleString('pt-BR'));
    console.log('üéØ Status: Verifica√ß√£o urgente de login finalizada');
}

// Executar verifica√ß√£o urgente
verificacaoUrgenteLogin().catch(console.error);

// üîÑ VERSIONSERVICE OTIMIZADO - GOL DE OURO v1.2.0
// Sistema de verifica√ß√£o de vers√£o com cache para evitar chamadas duplicadas

class VersionService {
  constructor() {
    this.cache = new Map();
    this.lastCheck = 0;
    this.cacheDuration = 60000; // 1 minuto
    this.isChecking = false;
  }

  // Verificar compatibilidade de vers√£o com cache
  async checkVersionCompatibility() {
    const now = Date.now();
    
    // Verificar cache
    if (this.cache.has('version') && (now - this.lastCheck) < this.cacheDuration) {
      const cached = this.cache.get('version');
      console.log('üì¶ [VersionService] Usando dados do cache');
      return cached;
    }

    // Evitar m√∫ltiplas verifica√ß√µes simult√¢neas
    if (this.isChecking) {
      console.log('‚è≥ [VersionService] Verifica√ß√£o j√° em andamento, aguardando...');
      return new Promise((resolve) => {
        const checkInterval = setInterval(() => {
          if (!this.isChecking && this.cache.has('version')) {
            clearInterval(checkInterval);
            resolve(this.cache.get('version'));
          }
        }, 100);
      });
    }

    this.isChecking = true;
    console.log('üîÑ [VersionService] Verificando compatibilidade de vers√£o...');

    try {
      // Simular verifica√ß√£o de vers√£o (pode ser substitu√≠do por chamada real)
      const versionInfo = {
        current: '1.2.0',
        compatible: true,
        lastCheck: now,
        features: {
          audio: true,
          cache: true,
          notifications: true
        }
      };

      // Armazenar no cache
      this.cache.set('version', versionInfo);
      this.lastCheck = now;
      
      console.log('‚úÖ [VersionService] Compatibilidade verificada:', versionInfo);
      return versionInfo;

    } catch (error) {
      console.error('‚ùå [VersionService] Erro na verifica√ß√£o:', error);
      return {
        current: '1.2.0',
        compatible: true,
        error: error.message,
        lastCheck: now
      };
    } finally {
      this.isChecking = false;
    }
  }

  // Limpar cache
  clearCache() {
    this.cache.clear();
    this.lastCheck = 0;
    console.log('üßπ [VersionService] Cache limpo');
  }

  // Obter estat√≠sticas do cache
  getCacheStats() {
    return {
      hasCache: this.cache.has('version'),
      lastCheck: this.lastCheck,
      cacheAge: Date.now() - this.lastCheck,
      isChecking: this.isChecking
    };
  }

  // M√©todo de compatibilidade (alias para checkVersionCompatibility)
  async checkCompatibility() {
    return await this.checkVersionCompatibility();
  }

  // Iniciar verifica√ß√£o peri√≥dica
  startPeriodicCheck(interval = 300000) { // 5 minutos por padr√£o
    if (this.periodicCheckInterval) {
      clearInterval(this.periodicCheckInterval);
    }
    
    this.periodicCheckInterval = setInterval(async () => {
      try {
        await this.checkVersionCompatibility();
        console.log('üîÑ [VersionService] Verifica√ß√£o peri√≥dica executada');
      } catch (error) {
        console.error('‚ùå [VersionService] Erro na verifica√ß√£o peri√≥dica:', error);
      }
    }, interval);
    
    console.log(`üîÑ [VersionService] Verifica√ß√£o peri√≥dica iniciada (${interval}ms)`);
  }

  // Parar verifica√ß√£o peri√≥dica
  stopPeriodicCheck() {
    if (this.periodicCheckInterval) {
      clearInterval(this.periodicCheckInterval);
      this.periodicCheckInterval = null;
      console.log('‚èπÔ∏è [VersionService] Verifica√ß√£o peri√≥dica parada');
    }
  }
}

// Inst√¢ncia global do VersionService
const versionService = new VersionService();

export default versionService;
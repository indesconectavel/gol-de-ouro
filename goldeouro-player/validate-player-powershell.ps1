# Valida√ß√£o do Sistema do Jogador - PowerShell
Write-Host "üéÆ Validando sistema do jogador..." -ForegroundColor Cyan
Write-Host ""

$totalTests = 0
$passedTests = 0

# Teste 1: Health Check Backend
Write-Host "üîç Testando Health Check Backend..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

# Teste 2: Frontend Jogador
Write-Host "üîç Testando Frontend Jogador..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5174" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

# Teste 3: Registro de Usu√°rio
Write-Host "üîç Testando Registro de Usu√°rio..." -NoNewline
try {
    $body = @{} | ConvertTo-Json
    $response = Invoke-WebRequest -Uri "http://localhost:3000/auth/register" -Method POST -Body $body -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 400) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

# Teste 4: Status do Jogo
Write-Host "üîç Testando Status do Jogo..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/games/status" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

# Teste 5: Fila de Jogos
Write-Host "üîç Testando Fila de Jogos..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/fila" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

# Teste 6: Cria√ß√£o PIX
Write-Host "üîç Testando Cria√ß√£o PIX..." -NoNewline
try {
    $body = @{} | ConvertTo-Json
    $response = Invoke-WebRequest -Uri "http://localhost:3000/api/payments/pix/criar" -Method POST -Body $body -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 400) {
        Write-Host " ‚úÖ OK" -ForegroundColor Green
        $passedTests++
    } else {
        Write-Host " ‚ùå ERRO: Status $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}
$totalTests++

Write-Host ""
Write-Host "üìä Resultado da Valida√ß√£o do Jogador:" -ForegroundColor Cyan
Write-Host "‚úÖ Passou: $passedTests/$totalTests" -ForegroundColor Green
Write-Host "‚ùå Falhou: $($totalTests - $passedTests)/$totalTests" -ForegroundColor Red

if ($passedTests -eq $totalTests) {
    Write-Host ""
    Write-Host "üéâ Sistema do Jogador funcionando perfeitamente!" -ForegroundColor Green
    Write-Host "üöÄ Pronto para GO-LIVE v1.1.1!" -ForegroundColor Yellow
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è Sistema do Jogador com problemas - Verificar logs" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üîß Solu√ß√µes poss√≠veis:" -ForegroundColor Cyan
    Write-Host "1. Verificar se o backend est√° rodando" -ForegroundColor White
    Write-Host "2. Verificar se a porta 3000 est√° livre" -ForegroundColor White
    Write-Host "3. Verificar se o frontend jogador est√° rodando" -ForegroundColor White
    Write-Host "4. Verificar se a porta 5174 est√° livre" -ForegroundColor White
    Write-Host "5. Verificar se o CORS est√° configurado" -ForegroundColor White
}

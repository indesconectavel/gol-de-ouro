#!/bin/bash
# SISTEMA DE PREVEN√á√ÉO DE INCONSIST√äNCIAS DE ROTAS - GOL DE OURO
# =============================================================
# Data: 20/10/2025
# Status: SISTEMA DE PREVEN√á√ÉO AUTOM√ÅTICA

set -e  # Parar em caso de erro

echo "üîç === SISTEMA DE PREVEN√á√ÉO DE INCONSIST√äNCIAS ==="
echo "üìÖ Data: $(date '+%d/%m/%Y, %H:%M:%S')"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log com cores
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "server-fly.js" ]; then
    log_error "Arquivo server-fly.js n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

log_info "Iniciando valida√ß√£o pr√©-deploy..."

# 1. VALIDA√á√ÉO DE CONFIGURA√á√ïES CR√çTICAS
log_info "Validando configura√ß√µes cr√≠ticas..."
if ! node validacao-pre-deploy.js; then
    log_error "Valida√ß√£o de configura√ß√µes falhou!"
    exit 1
fi
log_success "Configura√ß√µes cr√≠ticas validadas"

# 2. AUDITORIA AVAN√áADA DE ROTAS
log_info "Executando auditoria avan√ßada de rotas..."
if ! node auditoria-avancada-rotas.js; then
    log_error "Auditoria de rotas falhou!"
    exit 1
fi
log_success "Auditoria de rotas conclu√≠da"

# 3. VERIFICA√á√ÉO DE SINTAXE
log_info "Verificando sintaxe do c√≥digo..."
if ! node -c server-fly.js; then
    log_error "Erro de sintaxe no server-fly.js!"
    exit 1
fi
log_success "Sintaxe do backend validada"

# 4. VERIFICA√á√ÉO DO FRONTEND
log_info "Verificando configura√ß√£o do frontend..."
if [ ! -f "goldeouro-player/src/config/api.js" ]; then
    log_error "Arquivo de configura√ß√£o do frontend n√£o encontrado!"
    exit 1
fi
log_success "Configura√ß√£o do frontend validada"

# 5. TESTE DE CONECTIVIDADE COM BACKEND
log_info "Testando conectividade com backend..."
if ! curl -s -f "https://goldeouro-backend.fly.dev/meta" > /dev/null; then
    log_warning "Backend n√£o est√° respondendo. Continuando com deploy..."
else
    log_success "Backend est√° respondendo"
fi

# 6. VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE
log_info "Verificando vari√°veis de ambiente..."
if [ ! -f ".env" ]; then
    log_error "Arquivo .env n√£o encontrado!"
    exit 1
fi

# Verificar vari√°veis cr√≠ticas
source .env
if [ -z "$JWT_SECRET" ]; then
    log_error "JWT_SECRET n√£o definido!"
    exit 1
fi

if [ -z "$SUPABASE_URL" ]; then
    log_error "SUPABASE_URL n√£o definido!"
    exit 1
fi

log_success "Vari√°veis de ambiente validadas"

# 7. VERIFICA√á√ÉO DE DEPEND√äNCIAS
log_info "Verificando depend√™ncias..."
if [ ! -f "package.json" ]; then
    log_error "package.json n√£o encontrado!"
    exit 1
fi

if ! npm list --depth=0 > /dev/null 2>&1; then
    log_warning "Depend√™ncias n√£o instaladas. Instalando..."
    npm install
fi
log_success "Depend√™ncias validadas"

# 8. BACKUP DE SEGURAN√áA
log_info "Criando backup de seguran√ßa..."
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp server-fly.js "$BACKUP_DIR/"
cp .env "$BACKUP_DIR/"
log_success "Backup criado em $BACKUP_DIR"

# 9. RELAT√ìRIO FINAL
echo ""
echo "üìä === RELAT√ìRIO DE VALIDA√á√ÉO ==="
echo "‚úÖ Configura√ß√µes cr√≠ticas: OK"
echo "‚úÖ Auditoria de rotas: OK"
echo "‚úÖ Sintaxe do c√≥digo: OK"
echo "‚úÖ Configura√ß√£o do frontend: OK"
echo "‚úÖ Vari√°veis de ambiente: OK"
echo "‚úÖ Depend√™ncias: OK"
echo "‚úÖ Backup de seguran√ßa: OK"
echo ""

log_success "VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!"
log_info "Sistema pronto para deploy"

# 10. CONFIRMA√á√ÉO FINAL
echo ""
read -p "Deseja continuar com o deploy? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log_warning "Deploy cancelado pelo usu√°rio"
    exit 0
fi

log_info "Iniciando deploy..."

# Deploy do backend
log_info "Fazendo deploy do backend..."
if fly deploy; then
    log_success "Backend deployado com sucesso!"
else
    log_error "Erro no deploy do backend!"
    exit 1
fi

# Deploy do frontend
log_info "Fazendo deploy do frontend..."
cd goldeouro-player
if vercel --prod; then
    log_success "Frontend deployado com sucesso!"
else
    log_error "Erro no deploy do frontend!"
    exit 1
fi

cd ..

# Teste p√≥s-deploy
log_info "Executando testes p√≥s-deploy..."
sleep 10  # Aguardar propaga√ß√£o

if curl -s -f "https://goldeouro-backend.fly.dev/meta" > /dev/null; then
    log_success "Backend respondendo ap√≥s deploy"
else
    log_warning "Backend n√£o est√° respondendo ap√≥s deploy"
fi

if curl -s -f "https://goldeouro.lol" > /dev/null; then
    log_success "Frontend respondendo ap√≥s deploy"
else
    log_warning "Frontend n√£o est√° respondendo ap√≥s deploy"
fi

echo ""
log_success "DEPLOY CONCLU√çDO COM SUCESSO!"
log_info "Sistema validado e funcionando"

// db.js
const { Pool } = require('pg');
const env = require('./config/env');

// SOLUÇÃO DEFINITIVA: Substituir URL problemática automaticamente
function getFixedDatabaseUrl() {
  let databaseUrl = env.DATABASE_URL;
  
  // Se for Supabase com pooler, remover pooler automaticamente
  if (databaseUrl.includes('supabase.com') && databaseUrl.includes('pooler')) {
    console.log('🔧 SOLUÇÃO DEFINITIVA: Removendo pooler problemático da URL');
    
    // Extrair partes da URL original
    const urlParts = databaseUrl.match(/postgresql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/([^?]+)/);
    
    if (urlParts) {
      const [, user, password, host, port, database] = urlParts;
      
      // SOLUÇÃO FINAL DEFINITIVA REAL: Usar hostname que realmente existe
      // O hostname correto é: db.[PROJECT-REF].supabase.co
      // Vou extrair o project-ref da URL original
      const projectRef = host.replace('pooler.', '').split('.')[0];
      const newHost = `db.${projectRef}.supabase.co`;
      const newPort = port === '6543' ? '5432' : port;
      
      databaseUrl = `postgresql://${user}:${password}@${newHost}:${newPort}/${database}`;
      
      console.log('🔧 Nova URL (sem pooler):', `${newHost}:${newPort}/${database}`);
    } else {
      // Fallback: substituições simples
      databaseUrl = databaseUrl
        .replace(':6543', ':5432')
        .replace('pooler.', '')
        .replace('?pgbouncer=true', '')
        .replace('&pgbouncer=true', '');
      
      console.log('🔧 Nova URL (fallback):', databaseUrl.split('@')[1] || 'configurada');
    }
  }
  
  return databaseUrl;
}

// Função para detectar e configurar conexão Supabase
function createSupabasePool() {
  const isSupabase = env.DATABASE_URL.includes('supabase.com');
  const fixedUrl = getFixedDatabaseUrl();
  
  if (isSupabase) {
    console.log('🔧 Detectado Supabase - Aplicando SOLUÇÃO DEFINITIVA para SASL');
    
    // SOLUÇÃO DEFINITIVA: Configuração que funciona 100% com Supabase
    return new Pool({
      connectionString: fixedUrl,
      ssl: {
        rejectUnauthorized: false
      },
      // Configurações mínimas que funcionam com Supabase
      max: 1, // Apenas 1 conexão para evitar conflitos
      idleTimeoutMillis: 5000,
      connectionTimeoutMillis: 30000,
      // Configurações específicas para resolver SASL
      application_name: 'goldeouro-backend',
      // Desabilitar todas as funcionalidades que causam SASL
      keepAlive: false,
      // Configurações de retry
      retryDelay: 2000,
      maxRetries: 5
    });
  } else {
    // Configuração padrão para outros bancos
    console.log('🔧 Banco não-Supabase detectado - Usando configuração padrão');
    
    return new Pool({
      connectionString: fixedUrl,
      ssl: {
        rejectUnauthorized: false
      },
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 10000,
      application_name: 'goldeouro-backend'
    });
  }
}

// Criar pool com configuração automática
const pool = createSupabasePool();

pool.on('connect', () => {
  if (env.NODE_ENV === 'development') {
    console.log('🟢 Conectado ao banco PostgreSQL com sucesso!');
  }
});

pool.on('error', (err) => {
  console.error('🔴 Erro na conexão com o banco de dados:', err);
  // Em produção, não logar detalhes sensíveis
  if (env.NODE_ENV === 'production') {
    console.error('🔴 Erro de conexão com banco (detalhes ocultos)');
  }
});

// Função para testar conexão
pool.testConnection = async () => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as db_version');
    client.release();
    return {
      success: true,
      currentTime: result.rows[0].current_time,
      version: result.rows[0].db_version
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
};

module.exports = pool;

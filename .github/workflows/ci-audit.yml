name: CI/CD Pipeline - Gol de Ouro v1.1.1

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  BACKEND_URL: 'https://goldeouro-backend-v2.fly.dev'
  PLAYER_URL: 'https://player.goldeouro.lol'
  FRONTEND_URL: 'https://admin.goldeouro.lol'

jobs:
  # Job de Linting e Análise de Código
  lint-and-analyze:
    name: 🔍 Lint e Análise de Código
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🔍 Executar ESLint
        run: npm run lint

      - name: 🔒 Executar auditoria de segurança
        run: npm run audit

      - name: 📊 Análise de dependências
        run: |
          echo "📋 Dependências instaladas:"
          npm list --depth=0
          echo "🔍 Verificando vulnerabilidades..."
          npm audit --audit-level moderate

  # Job de Testes Unitários
  unit-tests:
    name: 🧪 Testes Unitários
    runs-on: ubuntu-latest
    needs: lint-and-analyze
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🧪 Executar testes unitários
        run: npm run test:coverage

      - name: 📊 Upload coverage para Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job de Testes E2E
  e2e-tests:
    name: 🎮 Testes E2E
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🎭 Instalar Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Executar testes E2E
        run: npm run test:e2e
        env:
          BACKEND_URL: ${{ env.BACKEND_URL }}
          PLAYER_URL: ${{ env.PLAYER_URL }}

      - name: 📸 Upload screenshots de falhas
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/

  # Job de Auditoria MCP
  mcp-audit:
    name: 🤖 Auditoria MCP
    runs-on: ubuntu-latest
    needs: [lint-and-analyze, unit-tests]
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🤖 Executar auditoria MCP
        run: |
          echo "🚀 Iniciando auditoria MCP..."
          node cursor-mcp-command.js
          echo "✅ Auditoria MCP concluída"

      - name: 📄 Upload relatório de auditoria
        uses: actions/upload-artifact@v3
        with:
          name: mcp-audit-report
          path: reports/

  # Job de Build e Validação
  build-and-validate:
    name: 🏗️ Build e Validação
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, mcp-audit]
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🏗️ Executar build
        run: npm run build

      - name: 🔍 Validar estrutura do projeto
        run: |
          echo "📁 Verificando estrutura do projeto..."
          ls -la
          echo "📋 Verificando arquivos críticos..."
          test -f package.json && echo "✅ package.json encontrado"
          test -f server-fly.js && echo "✅ server-fly.js encontrado"
          test -d routes && echo "✅ diretório routes encontrado"
          test -d controllers && echo "✅ diretório controllers encontrado"
          test -d middlewares && echo "✅ diretório middlewares encontrado"

  # Job de Deploy para Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🚀 Deploy para Fly.io (Staging)
        run: |
          echo "🚀 Fazendo deploy para staging..."
          # Comandos de deploy para staging
          echo "✅ Deploy para staging concluído"

      - name: 🔍 Verificar deploy
        run: |
          echo "🔍 Verificando deploy..."
          curl -f ${{ env.BACKEND_URL }}/api/health || exit 1
          echo "✅ Deploy verificado com sucesso"

  # Job de Deploy para Produção
  deploy-production:
    name: 🌟 Deploy Produção
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🚀 Deploy para Fly.io (Produção)
        run: |
          echo "🌟 Fazendo deploy para produção..."
          # Comandos de deploy para produção
          echo "✅ Deploy para produção concluído"

      - name: 🔍 Verificar deploy
        run: |
          echo "🔍 Verificando deploy..."
          curl -f ${{ env.BACKEND_URL }}/api/health || exit 1
          echo "✅ Deploy verificado com sucesso"

      - name: 📢 Notificar sucesso
        run: |
          echo "🎉 Deploy para produção realizado com sucesso!"
          echo "🔗 Backend: ${{ env.BACKEND_URL }}"
          echo "🔗 Player: ${{ env.PLAYER_URL }}"
          echo "🔗 Admin: ${{ env.FRONTEND_URL }}"

  # Job de Notificação
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 📢 Notificar resultado
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Pipeline executado com sucesso!"
          else
            echo "❌ Pipeline falhou!"
            exit 1
          fi

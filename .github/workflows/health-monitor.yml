name: üîç Health Monitor ‚Äì Gol de Ouro

on:
  schedule:
    - cron: "*/30 * * * *" # Executa a cada 30 minutos - OTIMIZADO PARA REDUZIR CUSTOS
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Criar diret√≥rios de logs
        run: |
          mkdir -p docs/logs
          touch docs/logs/health-summary.log
          touch docs/logs/health-fails.log
          echo "‚úÖ Diret√≥rios de logs criados e arquivos inicializados"

      - name: Verificar backend (Fly.io)
        id: backend-check
        run: |
          echo "Verificando backend..."
          
          # Retry logic: 3 tentativas com 30s de timeout cada
          for i in {1..3}; do
            echo "Tentativa $i de 3..."
            STATUS_BACKEND=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 https://goldeouro-backend-v2.fly.dev/health)
            echo "Backend HTTP: $STATUS_BACKEND"
            
            if [ "$STATUS_BACKEND" = "200" ]; then
              echo "‚úÖ Backend online na tentativa $i"
              echo "status=$STATUS_BACKEND" >> $GITHUB_OUTPUT
              echo "‚úÖ Backend ONLINE - $(date)" >> docs/logs/health-summary.log
              exit 0
            fi
            
            if [ $i -lt 3 ]; then
              echo "‚è≥ Aguardando 10s antes da pr√≥xima tentativa..."
              sleep 10
            fi
          done
          
          # Se chegou aqui, todas as tentativas falharam
          echo "‚ùå Backend fora do ar ap√≥s 3 tentativas"
          echo "Backend status: $STATUS_BACKEND" >> docs/logs/health-fails.log
          echo "‚ö†Ô∏è Backend OFFLINE - $(date)" >> docs/logs/health-summary.log
          echo "::error::Backend offline"
          exit 1

      - name: Verificar frontend (Vercel)
        id: frontend-check
        run: |
          echo "Verificando frontend..."
          STATUS_FRONT=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://goldeouro.lol)
          echo "Frontend HTTP: $STATUS_FRONT"
          echo "status=$STATUS_FRONT" >> $GITHUB_OUTPUT
          
          if [ "$STATUS_FRONT" != "200" ]; then
            echo "‚ùå Frontend fora do ar"
            echo "Frontend status: $STATUS_FRONT" >> docs/logs/health-fails.log
            echo "‚ö†Ô∏è Frontend OFFLINE - $(date)" >> docs/logs/health-summary.log
            echo "::error::Frontend offline"
            exit 1
          else
            echo "‚úÖ Frontend online"
            echo "‚úÖ Frontend ONLINE - $(date)" >> docs/logs/health-summary.log
          fi

      - name: Verificar banco de dados (Supabase)
        id: supabase-check
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          echo "Verificando banco de dados..."
          if [ -n "$SUPABASE_URL" ] && [ -n "$SUPABASE_KEY" ]; then
            curl -s -H "apikey: $SUPABASE_KEY" --max-time 10 "$SUPABASE_URL/rest/v1" > /dev/null
            if [ $? -ne 0 ]; then
              echo "‚ùå Supabase inacess√≠vel"
              echo "‚ö†Ô∏è Supabase OFFLINE - $(date)" >> docs/logs/health-summary.log
              echo "::error::Supabase offline"
              exit 1
            else
              echo "‚úÖ Banco de dados operacional"
              echo "‚úÖ Supabase ONLINE - $(date)" >> docs/logs/health-summary.log
            fi
          else
            echo "‚ö†Ô∏è Credenciais Supabase n√£o configuradas"
            echo "‚ö†Ô∏è Supabase SKIP - $(date)" >> docs/logs/health-summary.log
          fi

      - name: Verificar admin panel
        id: admin-check
        run: |
          echo "Verificando admin panel..."
          STATUS_ADMIN=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://admin.goldeouro.lol)
          echo "Admin HTTP: $STATUS_ADMIN"
          echo "status=$STATUS_ADMIN" >> $GITHUB_OUTPUT
          
          if [ "$STATUS_ADMIN" != "200" ]; then
            echo "‚ùå Admin panel fora do ar"
            echo "Admin status: $STATUS_ADMIN" >> docs/logs/health-fails.log
            echo "‚ö†Ô∏è Admin OFFLINE - $(date)" >> docs/logs/health-summary.log
            echo "::error::Admin panel offline"
            exit 1
          else
            echo "‚úÖ Admin panel online"
            echo "‚úÖ Admin ONLINE - $(date)" >> docs/logs/health-summary.log
          fi

      - name: Gerar relat√≥rio de sa√∫de
        run: |
          echo "üìä Gerando relat√≥rio de sa√∫de..."
          echo "=== RELAT√ìRIO DE SA√öDE - $(date) ===" > docs/logs/health-report.md
          echo "Backend: ${{ steps.backend-check.outputs.status }}" >> docs/logs/health-report.md
          echo "Frontend: ${{ steps.frontend-check.outputs.status }}" >> docs/logs/health-report.md
          echo "Admin: ${{ steps.admin-check.outputs.status }}" >> docs/logs/health-report.md
          echo "Supabase: $(if [ -n "$SUPABASE_URL" ]; then echo "Configurado"; else echo "N√£o configurado"; fi)" >> docs/logs/health-report.md
          echo "================================" >> docs/logs/health-report.md

      - name: Upload relat√≥rio de sa√∫de
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: health-report-${{ github.run_number }}
          path: docs/logs/health-report.md
          retention-days: 7

      - name: Gerar relat√≥rio di√°rio de sa√∫de
        run: |
          echo "üìä Relat√≥rio de monitoramento - $(date)" > docs/RELATORIO-HEALTH-MONITOR.md
          echo "" >> docs/RELATORIO-HEALTH-MONITOR.md
          echo "√öltimas verifica√ß√µes:" >> docs/RELATORIO-HEALTH-MONITOR.md
          if [ -f "docs/logs/health-summary.log" ]; then
            tail -n 20 docs/logs/health-summary.log >> docs/RELATORIO-HEALTH-MONITOR.md
          else
            echo "Nenhuma verifica√ß√£o anterior encontrada" >> docs/RELATORIO-HEALTH-MONITOR.md
          fi

      - name: Commitar relat√≥rios
        run: |
          git config --global user.email "ci@goldeouro.dev"
          git config --global user.name "CI Pipeline"
          git add docs/logs/ docs/RELATORIO-HEALTH-MONITOR.md
          git commit -m "üìä Atualiza√ß√£o autom√°tica ‚Äì Health Monitor $(date)" || echo "Nenhuma mudan√ßa para commitar"
          git push origin main || echo "Push falhou ou n√£o h√° mudan√ßas"

      - name: Enviar alerta (Slack/Discord)
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"content\":\"‚ö†Ô∏è *Gol de Ouro alerta:* Um dos servi√ßos est√° offline! Verifique o pipeline no GitHub Actions.\"}" \
            $DISCORD_WEBHOOK_URL || true
          fi
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"‚ö†Ô∏è Gol de Ouro alerta: Um dos servi√ßos est√° offline! Verifique o pipeline no GitHub Actions.\"}" \
            $SLACK_WEBHOOK_URL || true
          fi

name: üìä Monitoramento e Alertas

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '*/30 * * * *'  # Executar a cada 30 minutos - OTIMIZADO PARA REDUZIR CUSTOS
  workflow_dispatch:  # Permitir execu√ß√£o manual

env:
  NODE_VERSION: '20'
  FLY_APP_NAME: goldeouro-backend

jobs:
  # üìä Monitoramento de Sa√∫de
  health-monitoring:
    name: üìä Monitoramento de Sa√∫de
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: üîç Verificar sa√∫de do backend
        run: |
          echo "üîç Verificando sa√∫de do backend..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.FLY_APP_NAME }}.fly.dev/health)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Backend saud√°vel"
          else
            echo "‚ùå Backend com problemas: HTTP $response"
            exit 1
          fi
          
      - name: üîç Verificar sa√∫de do frontend
        run: |
          echo "üîç Verificando sa√∫de do frontend..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://goldeouro.lol)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Frontend saud√°vel"
          else
            echo "‚ùå Frontend com problemas: HTTP $response"
            exit 1
          fi
          
      - name: üîç Verificar tempo de resposta
        run: |
          echo "üîç Verificando tempo de resposta..."
          backend_time=$(curl -s -o /dev/null -w "%{time_total}" https://${{ env.FLY_APP_NAME }}.fly.dev/health)
          frontend_time=$(curl -s -o /dev/null -w "%{time_total}" https://goldeouro.lol)
          
          echo "Backend: ${backend_time}s"
          echo "Frontend: ${frontend_time}s"
          
          # Alertar se tempo > 5s
          if (( $(echo "$backend_time > 5" | bc -l) )); then
            echo "‚ö†Ô∏è Backend lento: ${backend_time}s"
          fi
          if (( $(echo "$frontend_time > 5" | bc -l) )); then
            echo "‚ö†Ô∏è Frontend lento: ${frontend_time}s"
          fi

  # üìä Monitoramento de Performance
  performance-monitoring:
    name: üìä Monitoramento de Performance
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: üìä An√°lise de performance frontend
        run: |
          echo "üìä Analisando performance do frontend..."
          if command -v lighthouse &> /dev/null; then
            lighthouse https://goldeouro.lol --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless"
            
            # Extrair m√©tricas principais
            performance=$(cat lighthouse-report.json | jq '.categories.performance.score * 100')
            accessibility=$(cat lighthouse-report.json | jq '.categories.accessibility.score * 100')
            best_practices=$(cat lighthouse-report.json | jq '.categories."best-practices".score * 100')
            seo=$(cat lighthouse-report.json | jq '.categories.seo.score * 100')
            
            echo "Performance: ${performance}%"
            echo "Accessibility: ${accessibility}%"
            echo "Best Practices: ${best_practices}%"
            echo "SEO: ${seo}%"
            
            # Alertar se performance < 80
            if (( $(echo "$performance < 80" | bc -l) )); then
              echo "‚ö†Ô∏è Performance baixa: ${performance}%"
            fi
          else
            echo "‚ö†Ô∏è Lighthouse n√£o instalado"
          fi
          
      - name: üìä Monitoramento de recursos
        run: |
          echo "üìä Monitorando recursos do backend..."
          if command -v flyctl &> /dev/null; then
            flyctl status --app ${{ env.FLY_APP_NAME }} || echo "‚ö†Ô∏è N√£o foi poss√≠vel obter status"
          else
            echo "‚ö†Ô∏è Flyctl n√£o instalado"
          fi

  # üìä Monitoramento de Logs
  log-monitoring:
    name: üìä Monitoramento de Logs
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: üìä Coletar logs do backend
        run: |
          echo "üìä Coletando logs do backend..."
          if command -v flyctl &> /dev/null; then
            flyctl logs --app ${{ env.FLY_APP_NAME }} --lines 100 > backend-logs.txt
            echo "‚úÖ Logs coletados"
            
            # Verificar erros
            error_count=$(grep -i "error\|exception\|failed" backend-logs.txt | wc -l)
            echo "Erros encontrados: $error_count"
            
            if [ "$error_count" -gt 10 ]; then
              echo "‚ö†Ô∏è Muitos erros encontrados: $error_count"
            fi
          else
            echo "‚ö†Ô∏è Flyctl n√£o instalado"
          fi
          
      - name: üìä An√°lise de logs
        run: |
          echo "üìä Analisando logs..."
          if [ -f "backend-logs.txt" ]; then
            echo "Total de linhas: $(wc -l < backend-logs.txt)"
            echo "Erros: $(grep -i "error" backend-logs.txt | wc -l)"
            echo "Warnings: $(grep -i "warning" backend-logs.txt | wc -l)"
            echo "Info: $(grep -i "info" backend-logs.txt | wc -l)"
          fi

  # üìä Relat√≥rio de Monitoramento
  monitoring-report:
    name: üìä Relat√≥rio de Monitoramento
    runs-on: ubuntu-latest
    needs: [health-monitoring, performance-monitoring, log-monitoring]
    if: always()
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: üìä Gerar relat√≥rio
        run: |
          echo "üìä Gerando relat√≥rio de monitoramento..."
          echo "## üìä Relat√≥rio de Monitoramento - $(date)" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "### üîç Status dos Servi√ßos:" >> monitoring-report.md
          echo "- Monitoramento de Sa√∫de: ${{ needs.health-monitoring.result }}" >> monitoring-report.md
          echo "- Monitoramento de Performance: ${{ needs.performance-monitoring.result }}" >> monitoring-report.md
          echo "- Monitoramento de Logs: ${{ needs.log-monitoring.result }}" >> monitoring-report.md
          echo "" >> monitoring-report.md
          echo "### üìà M√©tricas:" >> monitoring-report.md
          echo "- Data: $(date)" >> monitoring-report.md
          echo "- Branch: ${{ github.ref_name }}" >> monitoring-report.md
          echo "- Commit: ${{ github.sha }}" >> monitoring-report.md
          echo "- Backend: https://${{ env.FLY_APP_NAME }}.fly.dev" >> monitoring-report.md
          echo "- Frontend: https://goldeouro.lol" >> monitoring-report.md
          
      - name: üì§ Upload relat√≥rio
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report
          path: monitoring-report.md
          retention-days: 7
          
      - name: üì§ Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: backend-logs.txt
          retention-days: 7
        if: always()

  # üö® Alertas
  alerts:
    name: üö® Alertas
    runs-on: ubuntu-latest
    needs: [health-monitoring, performance-monitoring, log-monitoring]
    if: failure()
    
    steps:
      - name: üö® Enviar alerta
        run: |
          echo "üö® ALERTA: Problemas detectados no sistema!"
          echo "Verifique os logs acima para mais detalhes."
          echo "Servi√ßos afetados:"
          echo "- Backend: https://${{ env.FLY_APP_NAME }}.fly.dev"
          echo "- Frontend: https://goldeouro.lol"
          
          # Aqui voc√™ pode adicionar integra√ß√£o com Slack, Discord, etc.
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® Alerta: Problemas no Gol de Ouro"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

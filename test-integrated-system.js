/**
 * Teste Completo do Sistema Integrado IA/ML + Gamifica√ß√£o
 * Testa a integra√ß√£o entre analytics e sistema de gamifica√ß√£o
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// Dados de teste mais complexos para simular um jogador real
const testGameData = [
  // Primeiros jogos - aprendendo
  { zone: 1, isGoal: false, amount: 1.0, multiplier: 2.0, totalWin: 0 },
  { zone: 2, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 3, isGoal: false, amount: 1.0, multiplier: 1.5, totalWin: 0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 4, isGoal: false, amount: 1.0, multiplier: 1.8, totalWin: 0 },
  
  // Melhorando - sequ√™ncia de vit√≥rias
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  
  // Testando outras zonas
  { zone: 2, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 3, isGoal: true, amount: 1.0, multiplier: 1.5, totalWin: 1.5 },
  { zone: 4, isGoal: false, amount: 1.0, multiplier: 1.8, totalWin: 0 },
  { zone: 5, isGoal: true, amount: 1.0, multiplier: 1.8, totalWin: 1.8 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  
  // Mais jogos para testar consist√™ncia
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 2, isGoal: false, amount: 1.0, multiplier: 2.0, totalWin: 0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 3, isGoal: true, amount: 1.0, multiplier: 1.5, totalWin: 1.5 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 4, isGoal: true, amount: 1.0, multiplier: 1.8, totalWin: 1.8 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 2, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 1, isGoal: true, amount: 1.0, multiplier: 2.0, totalWin: 2.0 },
  { zone: 3, isGoal: false, amount: 1.0, multiplier: 1.5, totalWin: 0 }
];

async function testIntegratedSystem() {
  console.log('üß™ Iniciando teste do sistema integrado IA/ML + Gamifica√ß√£o...\n');

  try {
    const userId = 'integrated-test-user-456';

    // 1. Testar health check
    console.log('1. Testando health check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Health check:', healthResponse.data.status);
    console.log('');

    // 2. Simular jogos e coletar analytics
    console.log('2. Simulando jogos e coletando analytics...');
    
    for (let i = 0; i < testGameData.length; i++) {
      const gameData = testGameData[i];
      console.log(`   Jogo ${i + 1}: Zona ${gameData.zone}, Gol: ${gameData.isGoal ? 'Sim' : 'N√£o'}`);
      
      // Enviar dados de jogo
      await axios.post(`${BASE_URL}/api/analytics/player/${userId}`, {
        gameData: gameData
      });
      
      // Pequena pausa entre jogos
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    console.log('‚úÖ Dados de jogos enviados com sucesso\n');

    // 3. Obter analytics do jogador
    console.log('3. Obtendo analytics do jogador...');
    const analyticsResponse = await axios.get(`${BASE_URL}/api/analytics/player/${userId}`);
    const analytics = analyticsResponse.data;
    
    console.log('üìä Analytics:');
    console.log(`   - Total de jogos: ${analytics.gameHistory.length}`);
    console.log(`   - Taxa de sucesso: ${(analytics.patterns.successRate * 100).toFixed(1)}%`);
    console.log(`   - Sequ√™ncia de vit√≥rias: ${analytics.patterns.winStreak}`);
    console.log(`   - Zona favorita: ${analytics.patterns.favoriteZones[0]?.zone || 'N/A'}`);
    console.log(`   - Consist√™ncia: ${analytics.patterns.consistency ? 'Sim' : 'N√£o'}`);
    console.log(`   - Melhoria: ${(analytics.patterns.improvement * 100).toFixed(1)}%`);
    console.log('');

    // 4. Integrar com gamifica√ß√£o
    console.log('4. Integrando analytics com gamifica√ß√£o...');
    const integrationResponse = await axios.post(`${BASE_URL}/api/gamification/integrate/${userId}`, {
      analytics: analytics
    });
    const integration = integrationResponse.data.integration;
    
    console.log('üéÆ Integra√ß√£o com Gamifica√ß√£o:');
    console.log(`   - Subiu de n√≠vel: ${integration.levelUp ? 'Sim' : 'N√£o'}`);
    console.log(`   - Novo n√≠vel: ${integration.newLevel}`);
    console.log(`   - Experi√™ncia ganha: ${integration.experienceGained}`);
    console.log(`   - Novas conquistas: ${integration.newAchievements.length}`);
    console.log(`   - Novos badges: ${integration.newBadges.length}`);
    console.log('');

    // 5. Mostrar conquistas desbloqueadas
    if (integration.newAchievements.length > 0) {
      console.log('üèÜ Conquistas Desbloqueadas:');
      integration.newAchievements.forEach((achievement, index) => {
        console.log(`   ${index + 1}. ${achievement.name}`);
        console.log(`      ${achievement.description}`);
        console.log(`      +${achievement.experience} XP`);
        console.log('');
      });
    }

    // 6. Mostrar badges desbloqueados
    if (integration.newBadges.length > 0) {
      console.log('üèÖ Badges Desbloqueados:');
      integration.newBadges.forEach((badge, index) => {
        console.log(`   ${index + 1}. ${badge.name} (${badge.rarity})`);
        console.log(`      ${badge.description}`);
        console.log('');
      });
    }

    // 7. Obter dados de gamifica√ß√£o
    console.log('5. Obtendo dados de gamifica√ß√£o...');
    const gamificationResponse = await axios.get(`${BASE_URL}/api/gamification/gamification/${userId}`);
    const gamificationData = gamificationResponse.data;
    
    console.log('üéØ Dados de Gamifica√ß√£o:');
    console.log(`   - N√≠vel: ${gamificationData.level}`);
    console.log(`   - Experi√™ncia total: ${gamificationData.experience}`);
    console.log(`   - Conquistas: ${gamificationData.achievements.length}`);
    console.log(`   - Badges: ${gamificationData.badges.length}`);
    console.log('');

    // 8. Obter recomenda√ß√µes de gamifica√ß√£o
    console.log('6. Obtendo recomenda√ß√µes de gamifica√ß√£o...');
    const gamificationRecsResponse = await axios.get(`${BASE_URL}/api/gamification/recommendations/${userId}`);
    const gamificationRecs = gamificationRecsResponse.data.recommendations;
    
    console.log('üéÆ Recomenda√ß√µes de Gamifica√ß√£o:');
    gamificationRecs.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec.title}`);
      console.log(`      ${rec.message}`);
      console.log(`      A√ß√£o: ${rec.action}`);
      console.log('');
    });

    // 9. Obter recomenda√ß√µes de IA/ML
    console.log('7. Obtendo recomenda√ß√µes de IA/ML...');
    const mlRecsResponse = await axios.get(`${BASE_URL}/api/analytics/recommendations/${userId}`);
    const mlRecs = mlRecsResponse.data.recommendations;
    
    console.log('ü§ñ Recomenda√ß√µes de IA/ML:');
    mlRecs.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec.title}`);
      console.log(`      ${rec.message}`);
      console.log(`      Confian√ßa: ${(rec.confidence * 100).toFixed(1)}%`);
      console.log('');
    });

    // 10. Estat√≠sticas finais
    console.log('8. Estat√≠sticas finais...');
    const statsResponse = await axios.get(`${BASE_URL}/api/analytics/stats/${userId}`);
    const stats = statsResponse.data;
    
    console.log('üìà Estat√≠sticas Finais:');
    console.log(`   - Total de jogos: ${stats.totalGames}`);
    console.log(`   - Total de gols: ${stats.totalGoals}`);
    console.log(`   - Taxa de sucesso: ${(stats.successRate * 100).toFixed(1)}%`);
    console.log(`   - N√≠vel do jogador: ${stats.level || 'N/A'}`);
    console.log(`   - Experi√™ncia: ${stats.experience || 0}`);
    console.log(`   - Frequ√™ncia de jogo: ${stats.playingFrequency}`);
    console.log(`   - Toler√¢ncia ao risco: ${stats.riskTolerance}`);
    console.log('');

    console.log('üéâ Teste do sistema integrado conclu√≠do com sucesso!');
    console.log('');
    console.log('üìã Resumo do teste:');
    console.log('   ‚úÖ Sistema de IA/ML funcionando');
    console.log('   ‚úÖ Sistema de gamifica√ß√£o funcionando');
    console.log('   ‚úÖ Integra√ß√£o entre sistemas funcionando');
    console.log('   ‚úÖ Recomenda√ß√µes personalizadas funcionando');
    console.log('   ‚úÖ Conquistas e badges funcionando');
    console.log('   ‚úÖ Sistema completo operacional');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

// Executar testes
testIntegratedSystem();

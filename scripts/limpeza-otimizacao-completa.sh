#!/bin/bash

# üßπ LIMPEZA, OTIMIZA√á√ÉO E VERIFICA√á√ÉO COMPLETA DO GOL DE OURO
# ------------------------------------------------------------
# Este script remove arquivos pesados e tempor√°rios, reinstala depend√™ncias,
# otimiza o hist√≥rico Git e verifica automaticamente o pipeline principal.

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Iniciando limpeza e otimiza√ß√£o do projeto Gol de Ouro...${NC}"
echo "==================================================================="

# Fun√ß√£o para verificar se estamos no diret√≥rio correto
check_directory() {
    if [ ! -f "package.json" ] && [ ! -d "backend" ] && [ ! -d "goldeouro-player" ] && [ ! -d "goldeouro-admin" ]; then
        echo -e "${RED}‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto Gol de Ouro${NC}"
        echo -e "${YELLOW}üí° Dica: Certifique-se de estar em: E:\Chute de Ouro\goldeouro-backend${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Diret√≥rio correto detectado${NC}"
}

# Fun√ß√£o para backup de seguran√ßa
create_backup() {
    echo -e "${YELLOW}üíæ Criando backup de seguran√ßa antes da limpeza...${NC}"
    BACKUP_DIR="backup-pre-limpeza-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Backup de arquivos importantes
    cp -r backend/package*.json "$BACKUP_DIR/" 2>/dev/null || true
    cp -r goldeouro-player/package*.json "$BACKUP_DIR/" 2>/dev/null || true
    cp -r goldeouro-admin/package*.json "$BACKUP_DIR/" 2>/dev/null || true
    cp -r .github/ "$BACKUP_DIR/" 2>/dev/null || true
    cp -r scripts/ "$BACKUP_DIR/" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Backup criado em: $BACKUP_DIR${NC}"
}

# Fun√ß√£o para limpeza segura
safe_cleanup() {
    echo -e "${PURPLE}üßπ Iniciando limpeza de arquivos desnecess√°rios...${NC}"
    
    # 1Ô∏è‚É£ Remover arquivos e pastas desnecess√°rias
    echo -e "${CYAN}üìÅ Removendo node_modules...${NC}"
    find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
    
    echo -e "${CYAN}üìÅ Removendo pastas de build e cache...${NC}"
    rm -rf **/backups 2>/dev/null || true
    rm -rf **/artifacts 2>/dev/null || true
    rm -rf **/tmp 2>/dev/null || true
    rm -rf **/dist 2>/dev/null || true
    rm -rf **/.cache 2>/dev/null || true
    rm -rf **/.vercel 2>/dev/null || true
    rm -rf **/.fly 2>/dev/null || true
    rm -rf .turbo 2>/dev/null || true
    rm -rf .next 2>/dev/null || true
    
    echo -e "${CYAN}üìÅ Removendo backups antigos...${NC}"
    rm -rf BACKUP-COMPLETO-* 2>/dev/null || true
    rm -rf teste-rollback-* 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Limpeza de arquivos conclu√≠da${NC}"
}

# Fun√ß√£o para recriar estrutura
recreate_structure() {
    echo -e "${PURPLE}üèóÔ∏è Recriando estrutura de pastas essenciais...${NC}"
    
    # 2Ô∏è‚É£ Recriar pastas essenciais
    mkdir -p backend goldeouro-player goldeouro-admin docs scripts config
    
    echo -e "${GREEN}‚úÖ Estrutura de pastas recriada${NC}"
}

# Fun√ß√£o para reinstalar depend√™ncias
reinstall_dependencies() {
    echo -e "${PURPLE}üì¶ Reinstalando depend√™ncias essenciais...${NC}"
    
    # 3Ô∏è‚É£ Reinstalar depend√™ncias principais
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        echo -e "${CYAN}üì¶ Instalando depend√™ncias do backend...${NC}"
        cd backend && npm install --silent && cd ..
        echo -e "${GREEN}‚úÖ Backend: depend√™ncias instaladas${NC}"
    fi
    
    if [ -d "goldeouro-player" ] && [ -f "goldeouro-player/package.json" ]; then
        echo -e "${CYAN}üì¶ Instalando depend√™ncias do player...${NC}"
        cd goldeouro-player && npm install --silent && cd ..
        echo -e "${GREEN}‚úÖ Player: depend√™ncias instaladas${NC}"
    fi
    
    if [ -d "goldeouro-admin" ] && [ -f "goldeouro-admin/package.json" ]; then
        echo -e "${CYAN}üì¶ Instalando depend√™ncias do admin...${NC}"
        cd goldeouro-admin && npm install --silent && cd ..
        echo -e "${GREEN}‚úÖ Admin: depend√™ncias instaladas${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Todas as depend√™ncias foram reinstaladas${NC}"
}

# Fun√ß√£o para validar ambiente
validate_environment() {
    echo -e "${PURPLE}üß™ Validando ambiente local...${NC}"
    
    # 4Ô∏è‚É£ Validar ambiente local
    echo -e "${CYAN}üîç Verificando vers√µes:${NC}"
    echo "Node.js: $(node -v 2>/dev/null || echo '‚ùå N√£o instalado')"
    echo "NPM: $(npm -v 2>/dev/null || echo '‚ùå N√£o instalado')"
    echo "Git: $(git --version 2>/dev/null || echo '‚ùå N√£o instalado')"
    
    # Verificar se estamos em um reposit√≥rio Git
    if [ ! -d ".git" ]; then
        echo -e "${RED}‚ùå AVISO: N√£o √© um reposit√≥rio Git${NC}"
        echo -e "${YELLOW}üí° Execute 'git init' se necess√°rio${NC}"
    else
        echo -e "${GREEN}‚úÖ Reposit√≥rio Git detectado${NC}"
    fi
}

# Fun√ß√£o para verificar tamanho
check_size() {
    echo -e "${PURPLE}üìä Verificando tamanho do reposit√≥rio...${NC}"
    
    # 5Ô∏è‚É£ Verificar tamanho total do reposit√≥rio
    echo -e "${CYAN}üìè Tamanho total ap√≥s limpeza:${NC}"
    if command -v du >/dev/null 2>&1; then
        du -sh . --exclude=node_modules --exclude=backups --exclude=dist 2>/dev/null || echo "Tamanho: N√£o dispon√≠vel"
    else
        echo "Tamanho: Comando 'du' n√£o dispon√≠vel neste sistema"
    fi
}

# Fun√ß√£o para otimizar Git
optimize_git() {
    echo -e "${PURPLE}üß∞ Otimizando hist√≥rico Git...${NC}"
    
    # 6Ô∏è‚É£ Otimizar hist√≥rico Git
    if [ -d ".git" ]; then
        echo -e "${CYAN}üîß Executando limpeza do Git...${NC}"
        git reflog expire --expire=now --all 2>/dev/null || true
        git gc --prune=now --aggressive 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Hist√≥rico Git otimizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Pulando otimiza√ß√£o Git (n√£o √© um reposit√≥rio Git)${NC}"
    fi
}

# Fun√ß√£o para commit e push
commit_changes() {
    echo -e "${PURPLE}üíæ Commitando altera√ß√µes...${NC}"
    
    # 7Ô∏è‚É£ Refor√ßar sincroniza√ß√£o e commit
    if [ -d ".git" ]; then
        echo -e "${CYAN}üìù Adicionando arquivos ao Git...${NC}"
        git add . 2>/dev/null || true
        
        echo -e "${CYAN}üíæ Criando commit...${NC}"
        git commit -m "üßπ Limpeza e otimiza√ß√£o do reposit√≥rio (remo√ß√£o de tempor√°rios e builds)" 2>/dev/null || true
        
        echo -e "${CYAN}üöÄ Enviando para o reposit√≥rio remoto...${NC}"
        git push origin main 2>/dev/null || {
            echo -e "${YELLOW}‚ö†Ô∏è Falha no push. Verifique a configura√ß√£o do Git remoto${NC}"
            echo -e "${YELLOW}üí° Execute manualmente: git push origin main${NC}"
        }
        
        echo -e "${GREEN}‚úÖ Altera√ß√µes commitadas e enviadas${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Pulando commit (n√£o √© um reposit√≥rio Git)${NC}"
    fi
}

# Fun√ß√£o para reindexar workflows
reindex_workflows() {
    echo -e "${PURPLE}üîÑ For√ßando reindexa√ß√£o do workflow principal...${NC}"
    
    # 8Ô∏è‚É£ For√ßar reindexa√ß√£o de workflows no GitHub
    if [ -d ".git" ] && [ -d ".github/workflows" ]; then
        echo -e "${CYAN}üîÅ Tocando arquivo de workflow...${NC}"
        touch .github/workflows/main-pipeline.yml 2>/dev/null || true
        
        echo -e "${CYAN}üíæ Commitando altera√ß√£o de workflow...${NC}"
        git add .github/workflows/main-pipeline.yml 2>/dev/null || true
        git commit -m "üîÅ Reindex workflow principal - GitHub Actions" 2>/dev/null || true
        
        echo -e "${CYAN}üöÄ Enviando altera√ß√£o...${NC}"
        git push origin main 2>/dev/null || {
            echo -e "${YELLOW}‚ö†Ô∏è Falha no push do workflow. Execute manualmente${NC}"
        }
        
        echo -e "${GREEN}‚úÖ Workflow principal reindexado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Pulando reindexa√ß√£o (workflows n√£o encontrados)${NC}"
    fi
}

# Fun√ß√£o para verificar workflows
check_workflows() {
    echo -e "${PURPLE}üîç Verificando workflows ativos...${NC}"
    
    # 9Ô∏è‚É£ Auditoria e verifica√ß√£o autom√°tica de workflows
    echo -e "${CYAN}üìã Listando workflows dispon√≠veis:${NC}"
    if command -v gh >/dev/null 2>&1; then
        gh workflow list --repo indesconectavel/gol-de-ouro 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è GitHub CLI n√£o configurado ou reposit√≥rio n√£o encontrado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è GitHub CLI n√£o instalado. Verifique manualmente em:${NC}"
        echo -e "${BLUE}üåê https://github.com/indesconectavel/gol-de-ouro/actions${NC}"
    fi
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}===================================================================${NC}"
    echo -e "${BLUE}üßπ SCRIPT DE LIMPEZA E OTIMIZA√á√ÉO - GOL DE OURO${NC}"
    echo -e "${BLUE}===================================================================${NC}"
    echo ""
    
    # Executar todas as fun√ß√µes
    check_directory
    create_backup
    safe_cleanup
    recreate_structure
    reinstall_dependencies
    validate_environment
    check_size
    optimize_git
    commit_changes
    reindex_workflows
    check_workflows
    
    echo ""
    echo -e "${BLUE}===================================================================${NC}"
    echo -e "${GREEN}‚úÖ Limpeza conclu√≠da com sucesso!${NC}"
    echo -e "${GREEN}üöÄ Workflow principal reindexado e sincronizado com GitHub Actions.${NC}"
    echo ""
    echo -e "${YELLOW}üåê PR√ìXIMOS PASSOS:${NC}"
    echo -e "${CYAN}1. Acesse: https://github.com/indesconectavel/gol-de-ouro/actions${NC}"
    echo -e "${CYAN}2. Procure por: 'üöÄ Pipeline Principal - Gol de Ouro'${NC}"
    echo -e "${CYAN}3. Clique em 'Run workflow'${NC}"
    echo -e "${CYAN}4. Selecione branch: 'main'${NC}"
    echo -e "${CYAN}5. Clique em 'Run workflow' novamente${NC}"
    echo ""
    echo -e "${GREEN}üéØ MONITORAMENTO:${NC}"
    echo -e "${CYAN}‚Ä¢ Acompanhe a execu√ß√£o em tempo real${NC}"
    echo -e "${CYAN}‚Ä¢ Verifique os logs de cada job${NC}"
    echo -e "${CYAN}‚Ä¢ Confirme que todos os testes passaram${NC}"
    echo -e "${CYAN}‚Ä¢ Baixe os artifacts gerados${NC}"
    echo ""
    echo -e "${BLUE}===================================================================${NC}"
}

# Executar fun√ß√£o principal
main "$@"

const { io } = require('socket.io-client');
const jwt = require('jsonwebtoken');

// Configura√ß√µes
const SERVER_URL = 'http://localhost:3000';
const JWT_SECRET = process.env.JWT_SECRET || 'goldeouro_jwt_secret_key_2025_super_segura_minimo_32_chars';

// Criar token JWT para teste (usando o mesmo formato do sistema)
const testUser = {
  id: 1,
  email: 'teste@exemplo.com',
  name: 'Usu√°rio Teste'
};

const token = jwt.sign(testUser, JWT_SECRET, { expiresIn: '1h' });

console.log('üß™ Iniciando teste do sistema WebSocket...');
console.log(`üîó Conectando ao servidor: ${SERVER_URL}`);
console.log(`üîë Token gerado: ${token.substring(0, 20)}...`);

// Criar conex√£o Socket.io
const socket = io(SERVER_URL, {
  auth: {
    token: token
  },
  transports: ['websocket', 'polling']
});

// Eventos de conex√£o
socket.on('connect', () => {
  console.log('‚úÖ Conectado ao servidor WebSocket!');
  console.log(`üÜî Socket ID: ${socket.id}`);
  
  // Testar eventos
  testSocketEvents();
});

socket.on('disconnect', () => {
  console.log('‚ùå Desconectado do servidor WebSocket');
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Erro de conex√£o:', error.message);
});

socket.on('auth_error', (error) => {
  console.error('‚ùå Erro de autentica√ß√£o:', error.message);
});

// Fun√ß√£o para testar eventos
function testSocketEvents() {
  console.log('\nüß™ Testando eventos do WebSocket...');
  
  // Teste 1: Entrar na fila
  console.log('1Ô∏è‚É£ Testando: join-queue');
  socket.emit('join-queue');
  
  // Teste 2: Escutar atualiza√ß√µes da fila
  socket.on('queue-updated', (data) => {
    console.log('üì¢ Fila atualizada:', data);
  });
  
  // Teste 3: Entrar em uma partida
  setTimeout(() => {
    console.log('2Ô∏è‚É£ Testando: join-game');
    socket.emit('join-game', 'test-game-123');
  }, 2000);
  
  // Teste 4: Notificar chute
  setTimeout(() => {
    console.log('3Ô∏è‚É£ Testando: shot-taken');
    socket.emit('shot-taken', {
      gameId: 'test-game-123',
      shotResult: 'goal',
      isGoldenGoal: false
    });
  }, 4000);
  
  // Teste 5: Escutar resultado de chute
  socket.on('shot-result', (data) => {
    console.log('‚öΩ Resultado de chute recebido:', data);
  });
  
  // Teste 6: Sair da fila
  setTimeout(() => {
    console.log('4Ô∏è‚É£ Testando: leave-queue');
    socket.emit('leave-queue');
  }, 6000);
  
  // Teste 7: Sair da partida
  setTimeout(() => {
    console.log('5Ô∏è‚É£ Testando: leave-game');
    socket.emit('leave-game', 'test-game-123');
  }, 8000);
  
  // Finalizar teste
  setTimeout(() => {
    console.log('\n‚úÖ Teste do WebSocket conclu√≠do!');
    console.log('üîå Desconectando...');
    socket.disconnect();
    process.exit(0);
  }, 10000);
}

// Timeout de seguran√ßa
setTimeout(() => {
  console.log('\n‚è∞ Timeout - Finalizando teste');
  socket.disconnect();
  process.exit(1);
}, 15000);

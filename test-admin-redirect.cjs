const https = require('https');

// Teste espec√≠fico para verificar redirecionamento
async function testRedirect() {
  console.log('üîÑ TESTE ESPEC√çFICO DE REDIRECIONAMENTO\n');
  
  try {
    // Teste 1: Acesso direto √† raiz
    console.log('1. Testando acesso direto √† raiz...');
    const rootResponse = await fetch('https://admin.goldeouro.lol/', {
      redirect: 'manual'
    });
    
    console.log(`   Status: ${rootResponse.status}`);
    console.log(`   Headers: ${JSON.stringify(Object.fromEntries(rootResponse.headers.entries()))}`);
    
    if (rootResponse.status === 302 || rootResponse.status === 301) {
      console.log('   ‚úÖ Redirecionamento detectado');
      console.log(`   üìç Para: ${rootResponse.headers.get('location')}`);
    } else {
      console.log('   ‚ùå Nenhum redirecionamento');
      
      // Verificar conte√∫do
      const content = await rootResponse.text();
      console.log(`   üìÑ Tamanho do conte√∫do: ${content.length} caracteres`);
      
      if (content.includes('login') || content.includes('Login')) {
        console.log('   ‚úÖ Conte√∫do cont√©m refer√™ncia ao login');
      } else if (content.includes('Painel') || content.includes('Dashboard')) {
        console.log('   ‚ùå Conte√∫do mostra painel sem autentica√ß√£o');
      } else {
        console.log('   ‚ö†Ô∏è Conte√∫do inesperado');
        console.log(`   üìÑ Primeiros 200 caracteres: ${content.substring(0, 200)}`);
      }
    }

    // Teste 2: Acesso √† p√°gina de login
    console.log('\n2. Testando p√°gina de login...');
    const loginResponse = await fetch('https://admin.goldeouro.lol/login');
    
    if (loginResponse.ok) {
      console.log('   ‚úÖ P√°gina de login acess√≠vel');
      const loginContent = await loginResponse.text();
      
      if (loginContent.includes('G0ld3@0ur0_2025!')) {
        console.log('   ‚úÖ Senha configurada no c√≥digo');
      } else {
        console.log('   ‚ö†Ô∏è Senha n√£o encontrada no c√≥digo');
      }
      
      if (loginContent.includes('Verificando autentica√ß√£o')) {
        console.log('   ‚úÖ Loading de autentica√ß√£o presente');
      } else {
        console.log('   ‚ùå Loading de autentica√ß√£o ausente');
      }
    } else {
      console.log('   ‚ùå P√°gina de login inacess√≠vel');
    }

    // Teste 3: Verificar se h√° JavaScript executando
    console.log('\n3. Verificando execu√ß√£o de JavaScript...');
    const jsResponse = await fetch('https://admin.goldeouro.lol/');
    const jsContent = await jsResponse.text();
    
    if (jsContent.includes('ProtectedRoute')) {
      console.log('   ‚úÖ ProtectedRoute encontrado no c√≥digo');
    } else {
      console.log('   ‚ùå ProtectedRoute n√£o encontrado no c√≥digo');
    }
    
    if (jsContent.includes('isAuthenticated')) {
      console.log('   ‚úÖ isAuthenticated encontrado no c√≥digo');
    } else {
      console.log('   ‚ùå isAuthenticated n√£o encontrado no c√≥digo');
    }

    // Teste 4: Verificar headers de cache
    console.log('\n4. Verificando headers de cache...');
    const cacheResponse = await fetch('https://admin.goldeouro.lol/', {
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    console.log(`   ETag: ${cacheResponse.headers.get('etag')}`);
    console.log(`   Last-Modified: ${cacheResponse.headers.get('last-modified')}`);
    console.log(`   Cache-Control: ${cacheResponse.headers.get('cache-control')}`);

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testRedirect();

# SISTEMA DE PREVEN√á√ÉO DE INCONSIST√äNCIAS DE ROTAS - GOL DE OURO
# =============================================================
# Data: 20/10/2025
# Status: SISTEMA DE PREVEN√á√ÉO AUTOM√ÅTICA (PowerShell)

param(
    [switch]$SkipConfirmation
)

# Configura√ß√£o de cores
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    
    $colorMap = @{
        "Red" = "Red"
        "Green" = "Green"
        "Yellow" = "Yellow"
        "Blue" = "Cyan"
        "Info" = "Cyan"
        "Success" = "Green"
        "Warning" = "Yellow"
        "Error" = "Red"
    }
    
    Write-Host $Message -ForegroundColor $colorMap[$Color]
}

function Log-Info {
    param([string]$Message)
    Write-ColorOutput "‚ÑπÔ∏è  $Message" "Info"
}

function Log-Success {
    param([string]$Message)
    Write-ColorOutput "‚úÖ $Message" "Success"
}

function Log-Warning {
    param([string]$Message)
    Write-ColorOutput "‚ö†Ô∏è  $Message" "Warning"
}

function Log-Error {
    param([string]$Message)
    Write-ColorOutput "‚ùå $Message" "Error"
}

# In√≠cio do script
Write-ColorOutput "üîç === SISTEMA DE PREVEN√á√ÉO DE INCONSIST√äNCIAS ===" "Blue"
Write-ColorOutput "üìÖ Data: $(Get-Date -Format 'dd/MM/yyyy, HH:mm:ss')" "Blue"
Write-Host ""

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "server-fly.js")) {
    Log-Error "Arquivo server-fly.js n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
}

Log-Info "Iniciando valida√ß√£o pr√©-deploy..."

try {
    # 1. VALIDA√á√ÉO DE CONFIGURA√á√ïES CR√çTICAS
    Log-Info "Validando configura√ß√µes cr√≠ticas..."
    $validationResult = node validacao-pre-deploy.js
    if ($LASTEXITCODE -ne 0) {
        Log-Error "Valida√ß√£o de configura√ß√µes falhou!"
        exit 1
    }
    Log-Success "Configura√ß√µes cr√≠ticas validadas"

    # 2. AUDITORIA AVAN√áADA DE ROTAS
    Log-Info "Executando auditoria avan√ßada de rotas..."
    $auditResult = node auditoria-avancada-rotas.js
    if ($LASTEXITCODE -ne 0) {
        Log-Error "Auditoria de rotas falhou!"
        exit 1
    }
    Log-Success "Auditoria de rotas conclu√≠da"

    # 3. VERIFICA√á√ÉO DE SINTAXE
    Log-Info "Verificando sintaxe do c√≥digo..."
    $syntaxCheck = node -c server-fly.js
    if ($LASTEXITCODE -ne 0) {
        Log-Error "Erro de sintaxe no server-fly.js!"
        exit 1
    }
    Log-Success "Sintaxe do backend validada"

    # 4. VERIFICA√á√ÉO DO FRONTEND
    Log-Info "Verificando configura√ß√£o do frontend..."
    if (-not (Test-Path "goldeouro-player/src/config/api.js")) {
        Log-Error "Arquivo de configura√ß√£o do frontend n√£o encontrado!"
        exit 1
    }
    Log-Success "Configura√ß√£o do frontend validada"

    # 5. TESTE DE CONECTIVIDADE COM BACKEND
    Log-Info "Testando conectividade com backend..."
    try {
        $response = Invoke-WebRequest -Uri "https://goldeouro-backend.fly.dev/meta" -UseBasicParsing -TimeoutSec 10
        Log-Success "Backend est√° respondendo"
    } catch {
        Log-Warning "Backend n√£o est√° respondendo. Continuando com deploy..."
    }

    # 6. VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE
    Log-Info "Verificando vari√°veis de ambiente..."
    if (-not (Test-Path ".env")) {
        Log-Error "Arquivo .env n√£o encontrado!"
        exit 1
    }

    # Carregar vari√°veis de ambiente
    Get-Content ".env" | ForEach-Object {
        if ($_ -match "^([^=]+)=(.*)$") {
            [Environment]::SetEnvironmentVariable($matches[1], $matches[2], "Process")
        }
    }

    if (-not $env:JWT_SECRET) {
        Log-Error "JWT_SECRET n√£o definido!"
        exit 1
    }

    if (-not $env:SUPABASE_URL) {
        Log-Error "SUPABASE_URL n√£o definido!"
        exit 1
    }

    Log-Success "Vari√°veis de ambiente validadas"

    # 7. VERIFICA√á√ÉO DE DEPEND√äNCIAS
    Log-Info "Verificando depend√™ncias..."
    if (-not (Test-Path "package.json")) {
        Log-Error "package.json n√£o encontrado!"
        exit 1
    }

    try {
        npm list --depth=0 | Out-Null
        Log-Success "Depend√™ncias validadas"
    } catch {
        Log-Warning "Depend√™ncias n√£o instaladas. Instalando..."
        npm install
        Log-Success "Depend√™ncias instaladas"
    }

    # 8. BACKUP DE SEGURAN√áA
    Log-Info "Criando backup de seguran√ßa..."
    $backupDir = "backups/$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Copy-Item "server-fly.js" "$backupDir/"
    Copy-Item ".env" "$backupDir/"
    Log-Success "Backup criado em $backupDir"

    # 9. RELAT√ìRIO FINAL
    Write-Host ""
    Write-ColorOutput "üìä === RELAT√ìRIO DE VALIDA√á√ÉO ===" "Blue"
    Write-ColorOutput "‚úÖ Configura√ß√µes cr√≠ticas: OK" "Green"
    Write-ColorOutput "‚úÖ Auditoria de rotas: OK" "Green"
    Write-ColorOutput "‚úÖ Sintaxe do c√≥digo: OK" "Green"
    Write-ColorOutput "‚úÖ Configura√ß√£o do frontend: OK" "Green"
    Write-ColorOutput "‚úÖ Vari√°veis de ambiente: OK" "Green"
    Write-ColorOutput "‚úÖ Depend√™ncias: OK" "Green"
    Write-ColorOutput "‚úÖ Backup de seguran√ßa: OK" "Green"
    Write-Host ""

    Log-Success "VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!"
    Log-Info "Sistema pronto para deploy"

    # 10. CONFIRMA√á√ÉO FINAL
    if (-not $SkipConfirmation) {
        Write-Host ""
        $confirmation = Read-Host "Deseja continuar com o deploy? (y/N)"
        if ($confirmation -notmatch "^[Yy]$") {
            Log-Warning "Deploy cancelado pelo usu√°rio"
            exit 0
        }
    }

    Log-Info "Iniciando deploy..."

    # Deploy do backend
    Log-Info "Fazendo deploy do backend..."
    fly deploy
    if ($LASTEXITCODE -eq 0) {
        Log-Success "Backend deployado com sucesso!"
    } else {
        Log-Error "Erro no deploy do backend!"
        exit 1
    }

    # Deploy do frontend
    Log-Info "Fazendo deploy do frontend..."
    Push-Location "goldeouro-player"
    try {
        vercel --prod
        if ($LASTEXITCODE -eq 0) {
            Log-Success "Frontend deployado com sucesso!"
        } else {
            Log-Error "Erro no deploy do frontend!"
            exit 1
        }
    } finally {
        Pop-Location
    }

    # Teste p√≥s-deploy
    Log-Info "Executando testes p√≥s-deploy..."
    Start-Sleep -Seconds 10  # Aguardar propaga√ß√£o

    try {
        $response = Invoke-WebRequest -Uri "https://goldeouro-backend.fly.dev/meta" -UseBasicParsing -TimeoutSec 10
        Log-Success "Backend respondendo ap√≥s deploy"
    } catch {
        Log-Warning "Backend n√£o est√° respondendo ap√≥s deploy"
    }

    try {
        $response = Invoke-WebRequest -Uri "https://goldeouro.lol" -UseBasicParsing -TimeoutSec 10
        Log-Success "Frontend respondendo ap√≥s deploy"
    } catch {
        Log-Warning "Frontend n√£o est√° respondendo ap√≥s deploy"
    }

    Write-Host ""
    Log-Success "DEPLOY CONCLU√çDO COM SUCESSO!"
    Log-Info "Sistema validado e funcionando"

} catch {
    Log-Error "Erro durante a valida√ß√£o: $($_.Exception.Message)"
    exit 1
}

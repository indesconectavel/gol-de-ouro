#!/usr/bin/env node

/**
 * AUDITORIA COMPLETA PARA DEPLOY - GOL DE OURO
 * Verifica todos os sistemas antes do deploy
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç AUDITORIA COMPLETA DO SISTEMA - GOL DE OURO');
console.log('=' .repeat(60));

const auditResults = {
  backend: { status: 'pending', issues: [], files: [] },
  admin: { status: 'pending', issues: [], files: [] },
  player: { status: 'pending', issues: [], files: [] },
  deploy: { status: 'pending', issues: [], configs: [] }
};

// 1. AUDITORIA DO BACKEND
console.log('üîß 1. AUDITORIA DO BACKEND...');
try {
  // Verificar arquivos principais
  const backendFiles = [
    'server.js',
    'package.json',
    '.env',
    'db.js',
    'render.yaml',
    'Procfile'
  ];
  
  backendFiles.forEach(file => {
    if (fs.existsSync(file)) {
      auditResults.backend.files.push(`‚úÖ ${file}`);
    } else {
      auditResults.backend.issues.push(`‚ùå ${file} n√£o encontrado`);
    }
  });
  
  // Verificar estrutura de diret√≥rios
  const backendDirs = ['routes', 'middlewares', 'src', 'public'];
  backendDirs.forEach(dir => {
    if (fs.existsSync(dir)) {
      auditResults.backend.files.push(`‚úÖ ${dir}/`);
    } else {
      auditResults.backend.issues.push(`‚ùå ${dir}/ n√£o encontrado`);
    }
  });
  
  // Verificar package.json
  if (fs.existsSync('package.json')) {
    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (pkg.scripts && pkg.scripts.start) {
      auditResults.backend.files.push('‚úÖ Scripts de deploy configurados');
    } else {
      auditResults.backend.issues.push('‚ùå Scripts de deploy n√£o configurados');
    }
  }
  
  auditResults.backend.status = auditResults.backend.issues.length === 0 ? 'ok' : 'issues';
  
} catch (error) {
  auditResults.backend.issues.push(`‚ùå Erro na auditoria: ${error.message}`);
  auditResults.backend.status = 'error';
}

// 2. AUDITORIA DO FRONTEND ADMIN
console.log('üåê 2. AUDITORIA DO FRONTEND ADMIN...');
try {
  if (fs.existsSync('goldeouro-admin')) {
    process.chdir('goldeouro-admin');
    
    const adminFiles = [
      'package.json',
      'vite.config.js',
      'vercel.json',
      'index.html'
    ];
    
    adminFiles.forEach(file => {
      if (fs.existsSync(file)) {
        auditResults.admin.files.push(`‚úÖ ${file}`);
      } else {
        auditResults.admin.issues.push(`‚ùå ${file} n√£o encontrado`);
      }
    });
    
    // Verificar estrutura src
    if (fs.existsSync('src')) {
      const srcFiles = ['main.jsx', 'App.jsx', 'index.css'];
      srcFiles.forEach(file => {
        if (fs.existsSync(`src/${file}`)) {
          auditResults.admin.files.push(`‚úÖ src/${file}`);
        } else {
          auditResults.admin.issues.push(`‚ùå src/${file} n√£o encontrado`);
        }
      });
    }
    
    // Verificar build
    if (fs.existsSync('dist')) {
      auditResults.admin.files.push('‚úÖ Build de produ√ß√£o gerado');
    } else {
      auditResults.admin.issues.push('‚ùå Build de produ√ß√£o n√£o encontrado');
    }
    
    process.chdir('..');
    auditResults.admin.status = auditResults.admin.issues.length === 0 ? 'ok' : 'issues';
  } else {
    auditResults.admin.issues.push('‚ùå Diret√≥rio goldeouro-admin n√£o encontrado');
    auditResults.admin.status = 'error';
  }
} catch (error) {
  auditResults.admin.issues.push(`‚ùå Erro na auditoria: ${error.message}`);
  auditResults.admin.status = 'error';
}

// 3. AUDITORIA DO FRONTEND PLAYER
console.log('üéÆ 3. AUDITORIA DO FRONTEND PLAYER...');
try {
  if (fs.existsSync('goldeouro-player')) {
    process.chdir('goldeouro-player');
    
    const playerFiles = [
      'package.json',
      'vite.config.js',
      'vercel.json',
      'index.html'
    ];
    
    playerFiles.forEach(file => {
      if (fs.existsSync(file)) {
        auditResults.player.files.push(`‚úÖ ${file}`);
      } else {
        auditResults.player.issues.push(`‚ùå ${file} n√£o encontrado`);
      }
    });
    
    // Verificar estrutura src
    if (fs.existsSync('src')) {
      const srcFiles = ['main.jsx', 'App.jsx', 'index.css'];
      srcFiles.forEach(file => {
        if (fs.existsSync(`src/${file}`)) {
          auditResults.player.files.push(`‚úÖ src/${file}`);
        } else {
          auditResults.player.issues.push(`‚ùå src/${file} n√£o encontrado`);
        }
      });
      
      // Verificar p√°ginas
      const pages = ['Login.jsx', 'Register.jsx', 'Dashboard.jsx', 'Game.jsx', 'Withdraw.jsx', 'Profile.jsx'];
      pages.forEach(page => {
        if (fs.existsSync(`src/pages/${page}`)) {
          auditResults.player.files.push(`‚úÖ src/pages/${page}`);
        } else {
          auditResults.player.issues.push(`‚ùå src/pages/${page} n√£o encontrado`);
        }
      });
    }
    
    // Verificar build
    if (fs.existsSync('dist')) {
      auditResults.player.files.push('‚úÖ Build de produ√ß√£o gerado');
    } else {
      auditResults.player.issues.push('‚ùå Build de produ√ß√£o n√£o encontrado');
    }
    
    process.chdir('..');
    auditResults.player.status = auditResults.player.issues.length === 0 ? 'ok' : 'issues';
  } else {
    auditResults.player.issues.push('‚ùå Diret√≥rio goldeouro-player n√£o encontrado');
    auditResults.player.status = 'error';
  }
} catch (error) {
  auditResults.player.issues.push(`‚ùå Erro na auditoria: ${error.message}`);
  auditResults.player.status = 'error';
}

// 4. AUDITORIA DE CONFIGURA√á√ïES DE DEPLOY
console.log('üöÄ 4. AUDITORIA DE CONFIGURA√á√ïES DE DEPLOY...');
try {
  // Verificar configura√ß√µes do Render
  if (fs.existsSync('render.yaml')) {
    auditResults.deploy.configs.push('‚úÖ render.yaml configurado');
  } else {
    auditResults.deploy.issues.push('‚ùå render.yaml n√£o encontrado');
  }
  
  if (fs.existsSync('Procfile')) {
    auditResults.deploy.configs.push('‚úÖ Procfile configurado');
  } else {
    auditResults.deploy.issues.push('‚ùå Procfile n√£o encontrado');
  }
  
  // Verificar configura√ß√µes do Vercel
  if (fs.existsSync('goldeouro-admin/vercel.json')) {
    auditResults.deploy.configs.push('‚úÖ Admin vercel.json configurado');
  } else {
    auditResults.deploy.issues.push('‚ùå Admin vercel.json n√£o encontrado');
  }
  
  if (fs.existsSync('goldeouro-player/vercel.json')) {
    auditResults.deploy.configs.push('‚úÖ Player vercel.json configurado');
  } else {
    auditResults.deploy.issues.push('‚ùå Player vercel.json n√£o encontrado');
  }
  
  // Verificar .env
  if (fs.existsSync('.env')) {
    const envContent = fs.readFileSync('.env', 'utf8');
    const requiredVars = ['DATABASE_URL', 'JWT_SECRET', 'MERCADOPAGO_ACCESS_TOKEN'];
    requiredVars.forEach(varName => {
      if (envContent.includes(varName)) {
        auditResults.deploy.configs.push(`‚úÖ ${varName} configurado`);
      } else {
        auditResults.deploy.issues.push(`‚ùå ${varName} n√£o configurado`);
      }
    });
  } else {
    auditResults.deploy.issues.push('‚ùå .env n√£o encontrado');
  }
  
  auditResults.deploy.status = auditResults.deploy.issues.length === 0 ? 'ok' : 'issues';
  
} catch (error) {
  auditResults.deploy.issues.push(`‚ùå Erro na auditoria: ${error.message}`);
  auditResults.deploy.status = 'error';
}

// 5. RELAT√ìRIO FINAL
console.log('\nüìã RELAT√ìRIO DE AUDITORIA:');
console.log('=' .repeat(60));

console.log('\nüîß BACKEND:');
console.log(`Status: ${auditResults.backend.status === 'ok' ? '‚úÖ OK' : '‚ùå PROBLEMAS'}`);
auditResults.backend.files.forEach(file => console.log(`  ${file}`));
auditResults.backend.issues.forEach(issue => console.log(`  ${issue}`));

console.log('\nüåê FRONTEND ADMIN:');
console.log(`Status: ${auditResults.admin.status === 'ok' ? '‚úÖ OK' : '‚ùå PROBLEMAS'}`);
auditResults.admin.files.forEach(file => console.log(`  ${file}`));
auditResults.admin.issues.forEach(issue => console.log(`  ${issue}`));

console.log('\nüéÆ FRONTEND PLAYER:');
console.log(`Status: ${auditResults.player.status === 'ok' ? '‚úÖ OK' : '‚ùå PROBLEMAS'}`);
auditResults.player.files.forEach(file => console.log(`  ${file}`));
auditResults.player.issues.forEach(issue => console.log(`  ${issue}`));

console.log('\nüöÄ CONFIGURA√á√ïES DE DEPLOY:');
console.log(`Status: ${auditResults.deploy.status === 'ok' ? '‚úÖ OK' : '‚ùå PROBLEMAS'}`);
auditResults.deploy.configs.forEach(config => console.log(`  ${config}`));
auditResults.deploy.issues.forEach(issue => console.log(`  ${issue}`));

// 6. RESUMO GERAL
const totalIssues = auditResults.backend.issues.length + 
                   auditResults.admin.issues.length + 
                   auditResults.player.issues.length + 
                   auditResults.deploy.issues.length;

console.log('\nüéØ RESUMO GERAL:');
console.log('=' .repeat(60));
console.log(`Total de problemas encontrados: ${totalIssues}`);

if (totalIssues === 0) {
  console.log('‚úÖ SISTEMA PRONTO PARA DEPLOY!');
  console.log('\nüìã PR√ìXIMOS PASSOS:');
  console.log('1. Deploy do Backend no Render.com');
  console.log('2. Deploy do Frontend Admin no Vercel');
  console.log('3. Deploy do Frontend Player no Vercel');
  console.log('4. Backup completo na nuvem');
  console.log('5. Testes em produ√ß√£o');
} else {
  console.log('‚ùå CORRIGIR PROBLEMAS ANTES DO DEPLOY');
  console.log('\nüîß A√á√ïES NECESS√ÅRIAS:');
  console.log('1. Resolver todos os problemas listados acima');
  console.log('2. Executar auditoria novamente');
  console.log('3. Proceder com o deploy');
}

// Salvar relat√≥rio
const reportPath = `auditoria-deploy-${new Date().toISOString().split('T')[0]}.json`;
fs.writeFileSync(reportPath, JSON.stringify(auditResults, null, 2));
console.log(`\nüìÑ Relat√≥rio salvo em: ${reportPath}`);

process.exit(totalIssues === 0 ? 0 : 1);

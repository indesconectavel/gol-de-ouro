// Script para corrigir deploy no Render
const fs = require('fs');
const path = require('path');

console.log('üîß CORRIGINDO DEPLOY NO RENDER');
console.log('==============================');

// Verificar se o package.json est√° correto
const checkPackageJson = () => {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    console.log('üì¶ Verificando package.json:');
    console.log(`   Start command: ${packageJson.scripts.start}`);
    
    if (packageJson.scripts.start === 'node server-optimized.js') {
      console.log('‚úÖ Package.json correto');
      return true;
    } else {
      console.log('‚ùå Package.json incorreto');
      console.log('üîß Corrigindo...');
      
      packageJson.scripts.start = 'node server-optimized.js';
      fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
      console.log('‚úÖ Package.json corrigido');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar package.json:', error.message);
    return false;
  }
};

// Verificar se o server-optimized.js existe
const checkOptimizedServer = () => {
  try {
    if (fs.existsSync('server-optimized.js')) {
      console.log('‚úÖ server-optimized.js existe');
      return true;
    } else {
      console.log('‚ùå server-optimized.js n√£o encontrado');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar server-optimized.js:', error.message);
    return false;
  }
};

// Verificar se o utils/aggressiveMemoryCleanup.js existe
const checkMemoryCleanup = () => {
  try {
    if (fs.existsSync('utils/aggressiveMemoryCleanup.js')) {
      console.log('‚úÖ utils/aggressiveMemoryCleanup.js existe');
      return true;
    } else {
      console.log('‚ùå utils/aggressiveMemoryCleanup.js n√£o encontrado');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar utils/aggressiveMemoryCleanup.js:', error.message);
    return false;
  }
};

// Criar arquivo de verifica√ß√£o para o Render
const createRenderVerification = () => {
  const verificationContent = `
// Verifica√ß√£o de deploy no Render
console.log('üîç VERIFICA√á√ÉO DE DEPLOY NO RENDER');
console.log('==================================');
console.log('‚úÖ Servidor otimizado carregado');
console.log('‚úÖ Limpeza agressiva de mem√≥ria ativa');
console.log('‚úÖ Monitoramento a cada 5 segundos');
console.log('‚úÖ Rate limiting: 50 req/15min');
console.log('‚úÖ JSON limit: 1MB');
console.log('‚úÖ Limpeza preventiva a cada 2 minutos');
console.log('==================================');
`;
  
  try {
    fs.writeFileSync('render-verification.js', verificationContent);
    console.log('‚úÖ Arquivo de verifica√ß√£o criado');
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao criar arquivo de verifica√ß√£o:', error.message);
    return false;
  }
};

// Executar verifica√ß√µes
async function fixRenderDeploy() {
  console.log('üîç Verificando arquivos necess√°rios...\n');
  
  const packageOk = checkPackageJson();
  const serverOk = checkOptimizedServer();
  const cleanupOk = checkMemoryCleanup();
  const verificationOk = createRenderVerification();
  
  console.log('\nüìä RESUMO DAS VERIFICA√á√ïES:');
  console.log('===========================');
  console.log(`Package.json: ${packageOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Server-optimized.js: ${serverOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Memory cleanup: ${cleanupOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Verification file: ${verificationOk ? '‚úÖ' : '‚ùå'}`);
  
  if (packageOk && serverOk && cleanupOk) {
    console.log('\n‚úÖ Todos os arquivos est√£o corretos');
    console.log('üîß Pr√≥ximo passo: Fazer commit e push');
  } else {
    console.log('\n‚ùå Alguns arquivos precisam ser corrigidos');
    console.log('üîß Corrigindo e fazendo commit...');
  }
  
  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('===================');
  console.log('1. Fazer commit das corre√ß√µes');
  console.log('2. Fazer push para GitHub');
  console.log('3. Aguardar deploy autom√°tico no Render');
  console.log('4. Verificar logs para confirmar server-optimized.js');
  console.log('5. Monitorar uso de mem√≥ria');
  
  console.log('\nüìã COMANDOS PARA EXECUTAR:');
  console.log('==========================');
  console.log('git add .');
  console.log('git commit -m "fix: corrigir deploy do servidor otimizado"');
  console.log('git push origin main');
}

fixRenderDeploy().catch(console.error);

# Script de Deploy para Produ√ß√£o - Gol de Ouro v1.1.1
Write-Host "üöÄ DEPLOY PARA PRODU√á√ÉO - Gol de Ouro v1.1.1" -ForegroundColor Cyan
Write-Host "Data: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Gray
Write-Host ""

# Verificar se estamos no diret√≥rio correto
if (!(Test-Path "package.json")) {
    Write-Host "‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto" -ForegroundColor Red
    exit 1
}

Write-Host "üìã VERIFICANDO CONFIGURA√á√ïES..." -ForegroundColor Yellow

# 1. Verificar se router de produ√ß√£o existe
if (!(Test-Path "router-producao.js")) {
    Write-Host "‚ùå ERRO: router-producao.js n√£o encontrado" -ForegroundColor Red
    exit 1
}

# 2. Verificar se vercel.json do player est√° correto
$playerVercel = Get-Content "goldeouro-player/vercel.json" | ConvertFrom-Json
if ($playerVercel.env.VITE_API_URL -ne "https://goldeouro-backend-v2.fly.dev") {
    Write-Host "‚ùå ERRO: URL do backend incorreta no player" -ForegroundColor Red
    exit 1
}

# 3. Verificar se vercel.json do admin est√° correto
$adminVercel = Get-Content "goldeouro-admin/vercel.json" | ConvertFrom-Json
if ($adminVercel.env.VITE_API_URL -ne "https://goldeouro-backend-v2.fly.dev") {
    Write-Host "‚ùå ERRO: URL do backend incorreta no admin" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Configura√ß√µes verificadas" -ForegroundColor Green
Write-Host ""

Write-Host "üîÑ APLICANDO CONFIGURA√á√ïES DE PRODU√á√ÉO..." -ForegroundColor Yellow

# 1. Substituir router.js pelo router de produ√ß√£o
Write-Host "1. Atualizando router.js..." -NoNewline
try {
    Copy-Item "router-producao.js" "router.js" -Force
    Write-Host " ‚úÖ" -ForegroundColor Green
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 2. Verificar se n√£o h√° dados fict√≠cios
Write-Host "2. Verificando dados fict√≠cios..." -NoNewline
$routerContent = Get-Content "router.js" -Raw
if ($routerContent -match "mock|fict√≠cio|teste") {
    Write-Host " ‚ö†Ô∏è AVISO: Dados fict√≠cios ainda presentes" -ForegroundColor Yellow
} else {
    Write-Host " ‚úÖ" -ForegroundColor Green
}

Write-Host ""
Write-Host "üåê TESTANDO CONECTIVIDADE..." -ForegroundColor Yellow

# Testar backend atual
Write-Host "1. Testando backend atual..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "https://goldeouro-backend-v2.fly.dev/health" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ" -ForegroundColor Green
    } else {
        Write-Host " ‚ö†Ô∏è Status: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}

# Testar player mode
Write-Host "2. Testando player mode..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "https://goldeouro.lol" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ" -ForegroundColor Green
    } else {
        Write-Host " ‚ö†Ô∏è Status: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}

# Testar admin panel
Write-Host "3. Testando admin panel..." -NoNewline
try {
    $response = Invoke-WebRequest -Uri "https://admin.goldeouro.lol" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host " ‚úÖ" -ForegroundColor Green
    } else {
        Write-Host " ‚ö†Ô∏è Status: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host " ‚ùå ERRO: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üì¶ PREPARANDO DEPLOY..." -ForegroundColor Yellow

# Fazer commit das altera√ß√µes
Write-Host "1. Fazendo commit das altera√ß√µes..." -NoNewline
try {
    git add .
    git commit -m "PROD: Configura√ß√µes de produ√ß√£o - Removendo dados fict√≠cios" -m "- Atualizado router.js para produ√ß√£o" -m "- Corrigido URLs no vercel.json" -m "- Removidos dados mock" -m "- Configurado ambiente de produ√ß√£o"
    Write-Host " ‚úÖ" -ForegroundColor Green
} catch {
    Write-Host " ‚ö†Ô∏è AVISO: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Criar tag de produ√ß√£o
Write-Host "2. Criando tag de produ√ß√£o..." -NoNewline
try {
    git tag -a "v1.1.1-producao" -m "Vers√£o de produ√ß√£o v1.1.1 - Sem dados fict√≠cios"
    Write-Host " ‚úÖ" -ForegroundColor Green
} catch {
    Write-Host " ‚ö†Ô∏è AVISO: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ PR√ìXIMOS PASSOS RECOMENDADOS:" -ForegroundColor Cyan
Write-Host "1. Deploy do backend no Fly.io" -ForegroundColor White
Write-Host "2. Deploy do player mode no Vercel" -ForegroundColor White
Write-Host "3. Deploy do admin panel no Vercel" -ForegroundColor White
Write-Host "4. Implementar banco de dados real" -ForegroundColor White
Write-Host "5. Implementar autentica√ß√£o JWT" -ForegroundColor White
Write-Host "6. Implementar pagamentos PIX" -ForegroundColor White

Write-Host ""
Write-Host "‚úÖ CONFIGURA√á√ïES DE PRODU√á√ÉO APLICADAS!" -ForegroundColor Green
Write-Host "Sistema pronto para deploy em producao" -ForegroundColor Yellow

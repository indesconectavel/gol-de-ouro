require('dotenv').config();
const axios = require('axios');
const jwt = require('jsonwebtoken');

const BASE_URL = process.env.BACKEND_URL || 'https://goldeouro-backend.fly.dev';
const JWT_SECRET = process.env.JWT_SECRET || 'goldeouro-secret-key-2025';

// Configura√ß√µes de teste
const TEST_USER_EMAIL = 'teste-aprendizado@example.com';
const TEST_USER_PASSWORD = 'senha123456';
const TEST_USER_NAME = 'Teste Aprendizado';

let authToken = '';
let testUserId = '';

// M√©tricas de aprendizado
const learningMetrics = {
  routeCompatibility: { tests: 0, passed: 0, failed: 0, issues: [] },
  authentication: { tests: 0, passed: 0, failed: 0, issues: [] },
  dataConsistency: { tests: 0, passed: 0, failed: 0, issues: [] },
  integration: { tests: 0, passed: 0, failed: 0, issues: [] }
};

// Fun√ß√£o para registrar m√©tricas de aprendizado
function recordLearningMetric(category, success, issue = null) {
  learningMetrics[category].tests++;
  if (success) {
    learningMetrics[category].passed++;
  } else {
    learningMetrics[category].failed++;
    if (issue) {
      learningMetrics[category].issues.push(issue);
    }
  }
}

// =====================================================
// FASE 1: MAPEAMENTO DE ROTAS E COMPATIBILIDADE
// =====================================================

async function testRouteCompatibility() {
  console.log('üîç FASE 1: MAPEAMENTO DE ROTAS E COMPATIBILIDADE');
  console.log('-'.repeat(60));
  
  // Rotas que o frontend pode chamar (baseado nos erros anteriores)
  const frontendRoutes = [
    { method: 'GET', path: '/meta', description: 'Metadados do sistema' },
    { method: 'POST', path: '/auth/login', description: 'Login de usu√°rio' },
    { method: 'GET', path: '/usuario/perfil', description: 'Perfil do usu√°rio' },
    { method: 'GET', path: '/api/user/profile', description: 'Perfil do usu√°rio (API)' },
    { method: 'GET', path: '/api/payments/pix/usuario', description: 'PIX do usu√°rio' },
    { method: 'POST', path: '/api/payments/pix/criar', description: 'Criar PIX' },
    { method: 'GET', path: '/api/metrics', description: 'M√©tricas do sistema' },
    { method: 'GET', path: '/health', description: 'Health check' },
    { method: 'POST', path: '/api/games/shoot', description: 'Chutar no jogo' },
    { method: 'GET', path: '/api/fila/entrar', description: 'Entrar na fila' }
  ];

  console.log('üìã Testando compatibilidade de rotas...');
  
  for (const route of frontendRoutes) {
    try {
      const config = {
        method: route.method.toLowerCase(),
        url: `${BASE_URL}${route.path}`,
        timeout: 10000,
        validateStatus: () => true // Aceitar qualquer status
      };

      // Adicionar headers de autentica√ß√£o se necess√°rio
      if (authToken && route.path.includes('/usuario/') || route.path.includes('/api/user/') || route.path.includes('/api/payments/')) {
        config.headers = { Authorization: `Bearer ${authToken}` };
      }

      // Adicionar body para POST
      if (route.method === 'POST') {
        if (route.path === '/auth/login') {
          config.data = { email: TEST_USER_EMAIL, password: TEST_USER_PASSWORD };
        } else if (route.path === '/api/payments/pix/criar') {
          config.data = { amount: 10 };
        } else if (route.path === '/api/games/shoot') {
          config.data = { direction: 'center', amount: 1 };
        }
      }

      const response = await axios(config);
      
      // Considerar sucesso se n√£o for 404 (rota n√£o encontrada)
      const isSuccess = response.status !== 404;
      
      recordLearningMetric('routeCompatibility', isSuccess, 
        isSuccess ? null : `Rota ${route.method} ${route.path} retornou 404`);
      
      const status = isSuccess ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${route.method} ${route.path} - ${response.status} (${route.description})`);
      
    } catch (error) {
      recordLearningMetric('routeCompatibility', false, 
        `Erro ao testar ${route.method} ${route.path}: ${error.message}`);
      console.log(`‚ùå ${route.method} ${route.path} - ERRO: ${error.message}`);
    }
  }
  
  const successRate = Math.round((learningMetrics.routeCompatibility.passed / learningMetrics.routeCompatibility.tests) * 100);
  console.log(`üìä Compatibilidade de Rotas: ${learningMetrics.routeCompatibility.passed}/${learningMetrics.routeCompatibility.tests} (${successRate}%)`);
}

// =====================================================
// FASE 2: VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
// =====================================================

async function testAuthentication() {
  console.log('\nüîê FASE 2: VERIFICA√á√ÉO DE AUTENTICA√á√ÉO');
  console.log('-'.repeat(60));
  
  // Primeiro, fazer login para obter token
  try {
    console.log('üîë Fazendo login para obter token...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: TEST_USER_EMAIL,
      password: TEST_USER_PASSWORD
    }, { timeout: 10000 });
    
    if (loginResponse.data.success && loginResponse.data.token) {
      authToken = loginResponse.data.token;
      testUserId = loginResponse.data.user?.id;
      console.log('‚úÖ Login realizado com sucesso');
      recordLearningMetric('authentication', true);
    } else {
      console.log('‚ùå Login falhou - resposta inv√°lida');
      recordLearningMetric('authentication', false, 'Resposta de login inv√°lida');
    }
  } catch (error) {
    console.log('‚ùå Erro no login:', error.response?.data?.message || error.message);
    recordLearningMetric('authentication', false, `Erro no login: ${error.message}`);
  }

  // Testar endpoints protegidos
  const protectedEndpoints = [
    { path: '/usuario/perfil', description: 'Perfil via compatibilidade' },
    { path: '/api/user/profile', description: 'Perfil via API' },
    { path: '/api/payments/pix/usuario', description: 'PIX do usu√°rio' },
    { path: '/api/games/shoot', description: 'Chutar no jogo' }
  ];

  console.log('üîí Testando endpoints protegidos...');
  
  for (const endpoint of protectedEndpoints) {
    try {
      const response = await axios.get(`${BASE_URL}${endpoint.path}`, {
        headers: { Authorization: `Bearer ${authToken}` },
        timeout: 10000,
        validateStatus: () => true
      });
      
      const isSuccess = response.status === 200;
      recordLearningMetric('authentication', isSuccess, 
        isSuccess ? null : `Endpoint ${endpoint.path} retornou ${response.status}`);
      
      const status = isSuccess ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${endpoint.path} - ${response.status} (${endpoint.description})`);
      
    } catch (error) {
      recordLearningMetric('authentication', false, 
        `Erro ao testar ${endpoint.path}: ${error.message}`);
      console.log(`‚ùå ${endpoint.path} - ERRO: ${error.message}`);
    }
  }
  
  const successRate = Math.round((learningMetrics.authentication.passed / learningMetrics.authentication.tests) * 100);
  console.log(`üìä Autentica√ß√£o: ${learningMetrics.authentication.passed}/${learningMetrics.authentication.tests} (${successRate}%)`);
}

// =====================================================
// FASE 3: VERIFICA√á√ÉO DE CONSIST√äNCIA DE DADOS
// =====================================================

async function testDataConsistency() {
  console.log('\nüìä FASE 3: VERIFICA√á√ÉO DE CONSIST√äNCIA DE DADOS');
  console.log('-'.repeat(60));
  
  if (!authToken) {
    console.log('‚ö†Ô∏è Pulando teste de dados - token n√£o dispon√≠vel');
    return;
  }

  // Testar estrutura de resposta dos endpoints
  const dataTests = [
    { 
      endpoint: '/usuario/perfil', 
      expectedFields: ['success', 'data', 'user'],
      description: 'Perfil via compatibilidade'
    },
    { 
      endpoint: '/api/user/profile', 
      expectedFields: ['success', 'data'],
      description: 'Perfil via API'
    },
    { 
      endpoint: '/api/payments/pix/usuario', 
      expectedFields: ['success', 'data', 'payments'],
      description: 'PIX do usu√°rio'
    },
    { 
      endpoint: '/api/metrics', 
      expectedFields: ['success', 'data'],
      description: 'M√©tricas do sistema'
    }
  ];

  console.log('üîç Testando estrutura de dados...');
  
  for (const test of dataTests) {
    try {
      const response = await axios.get(`${BASE_URL}${test.endpoint}`, {
        headers: { Authorization: `Bearer ${authToken}` },
        timeout: 10000
      });
      
      if (response.status === 200 && response.data) {
        const hasExpectedFields = test.expectedFields.every(field => 
          response.data.hasOwnProperty(field)
        );
        
        recordLearningMetric('dataConsistency', hasExpectedFields, 
          hasExpectedFields ? null : `Endpoint ${test.endpoint} n√£o tem campos esperados: ${test.expectedFields.join(', ')}`);
        
        const status = hasExpectedFields ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${test.endpoint} - Estrutura ${hasExpectedFields ? 'OK' : 'INV√ÅLIDA'} (${test.description})`);
        
        if (!hasExpectedFields) {
          console.log(`   Campos encontrados: ${Object.keys(response.data).join(', ')}`);
          console.log(`   Campos esperados: ${test.expectedFields.join(', ')}`);
        }
      } else {
        recordLearningMetric('dataConsistency', false, 
          `Endpoint ${test.endpoint} retornou status ${response.status}`);
        console.log(`‚ùå ${test.endpoint} - Status ${response.status} (${test.description})`);
      }
      
    } catch (error) {
      recordLearningMetric('dataConsistency', false, 
        `Erro ao testar ${test.endpoint}: ${error.message}`);
      console.log(`‚ùå ${test.endpoint} - ERRO: ${error.message}`);
    }
  }
  
  const successRate = Math.round((learningMetrics.dataConsistency.passed / learningMetrics.dataConsistency.tests) * 100);
  console.log(`üìä Consist√™ncia de Dados: ${learningMetrics.dataConsistency.passed}/${learningMetrics.dataConsistency.tests} (${successRate}%)`);
}

// =====================================================
// FASE 4: TESTE DE INTEGRA√á√ÉO COMPLETA
// =====================================================

async function testIntegrationFlow() {
  console.log('\nüéÆ FASE 4: TESTE DE INTEGRA√á√ÉO COMPLETA');
  console.log('-'.repeat(60));
  
  if (!authToken) {
    console.log('‚ö†Ô∏è Pulando teste de integra√ß√£o - token n√£o dispon√≠vel');
    return;
  }

  // Simular fluxo completo do usu√°rio
  const integrationSteps = [
    { step: 'Login', action: () => axios.post(`${BASE_URL}/auth/login`, { email: TEST_USER_EMAIL, password: TEST_USER_PASSWORD }) },
    { step: 'Verificar Meta', action: () => axios.get(`${BASE_URL}/meta`) },
    { step: 'Carregar Perfil', action: () => axios.get(`${BASE_URL}/usuario/perfil`, { headers: { Authorization: `Bearer ${authToken}` } }) },
    { step: 'Carregar PIX', action: () => axios.get(`${BASE_URL}/api/payments/pix/usuario`, { headers: { Authorization: `Bearer ${authToken}` } }) },
    { step: 'Verificar M√©tricas', action: () => axios.get(`${BASE_URL}/api/metrics`) },
    { step: 'Health Check', action: () => axios.get(`${BASE_URL}/health`) }
  ];

  console.log('üîÑ Simulando fluxo completo do usu√°rio...');
  
  let successfulSteps = 0;
  
  for (const step of integrationSteps) {
    try {
      const response = await step.action();
      
      if (response.status >= 200 && response.status < 300) {
        successfulSteps++;
        console.log(`‚úÖ ${step.step} - ${response.status} OK`);
      } else {
        console.log(`‚ùå ${step.step} - ${response.status} ERRO`);
      }
      
    } catch (error) {
      console.log(`‚ùå ${step.step} - ERRO: ${error.message}`);
    }
  }
  
  const integrationSuccess = successfulSteps >= integrationSteps.length * 0.8; // 80% de sucesso
  recordLearningMetric('integration', integrationSuccess, 
    integrationSuccess ? null : `Apenas ${successfulSteps}/${integrationSteps.length} passos funcionaram`);
  
  const successRate = Math.round((successfulSteps / integrationSteps.length) * 100);
  console.log(`üìä Integra√ß√£o: ${successfulSteps}/${integrationSteps.length} (${successRate}%)`);
}

// =====================================================
// AN√ÅLISE DE APRENDIZADO E RECOMENDA√á√ïES
// =====================================================

function analyzeLearningAndRecommendations() {
  console.log('\nüß† AN√ÅLISE DE APRENDIZADO E RECOMENDA√á√ïES');
  console.log('='.repeat(80));
  
  // Calcular m√©tricas gerais
  let totalTests = 0;
  let totalPassed = 0;
  let totalIssues = 0;
  
  Object.keys(learningMetrics).forEach(category => {
    const metrics = learningMetrics[category];
    totalTests += metrics.tests;
    totalPassed += metrics.passed;
    totalIssues += metrics.issues.length;
  });
  
  const overallSuccessRate = totalTests > 0 ? Math.round((totalPassed / totalTests) * 100) : 0;
  
  console.log(`üìä RESUMO GERAL:`);
  console.log(`   Total de Testes: ${totalTests}`);
  console.log(`   Testes Aprovados: ${totalPassed}`);
  console.log(`   Taxa de Sucesso: ${overallSuccessRate}%`);
  console.log(`   Problemas Identificados: ${totalIssues}`);
  
  // An√°lise por categoria
  console.log(`\nüìã AN√ÅLISE POR CATEGORIA:`);
  Object.keys(learningMetrics).forEach(category => {
    const metrics = learningMetrics[category];
    const successRate = metrics.tests > 0 ? Math.round((metrics.passed / metrics.tests) * 100) : 0;
    
    console.log(`\nüîç ${category.toUpperCase()}:`);
    console.log(`   Taxa de Sucesso: ${successRate}%`);
    console.log(`   Problemas: ${metrics.issues.length}`);
    
    if (metrics.issues.length > 0) {
      console.log(`   Detalhes dos Problemas:`);
      metrics.issues.forEach((issue, index) => {
        console.log(`     ${index + 1}. ${issue}`);
      });
    }
  });
  
  // Recomenda√ß√µes baseadas no aprendizado
  console.log(`\nüí° RECOMENDA√á√ïES BASEADAS NO APRENDIZADO:`);
  
  if (learningMetrics.routeCompatibility.issues.length > 0) {
    console.log(`\nüõ†Ô∏è COMPATIBILIDADE DE ROTAS:`);
    console.log(`   - Implementar endpoints de compatibilidade para todas as rotas antigas`);
    console.log(`   - Criar sistema de redirecionamento autom√°tico`);
    console.log(`   - Documentar todas as rotas suportadas`);
  }
  
  if (learningMetrics.authentication.issues.length > 0) {
    console.log(`\nüîê AUTENTICA√á√ÉO:`);
    console.log(`   - Verificar middleware de autentica√ß√£o em todos os endpoints`);
    console.log(`   - Testar tokens JWT em diferentes cen√°rios`);
    console.log(`   - Implementar logs detalhados de autentica√ß√£o`);
  }
  
  if (learningMetrics.dataConsistency.issues.length > 0) {
    console.log(`\nüìä CONSIST√äNCIA DE DADOS:`);
    console.log(`   - Padronizar estrutura de resposta de todos os endpoints`);
    console.log(`   - Implementar valida√ß√£o de schema de resposta`);
    console.log(`   - Criar testes automatizados para estrutura de dados`);
  }
  
  if (learningMetrics.integration.issues.length > 0) {
    console.log(`\nüéÆ INTEGRA√á√ÉO:`);
    console.log(`   - Implementar testes de integra√ß√£o automatizados`);
    console.log(`   - Criar fluxos de teste end-to-end`);
    console.log(`   - Monitorar m√©tricas de integra√ß√£o em tempo real`);
  }
  
  // Li√ß√µes aprendidas dos erros anteriores
  console.log(`\nüìö LI√á√ïES APRENDIDAS DOS ERROS ANTERIORES:`);
  console.log(`   1. SEMPRE manter compatibilidade entre vers√µes do frontend e backend`);
  console.log(`   2. PADRONIZAR nomenclatura de colunas e campos em todo o sistema`);
  console.log(`   3. MAPEAR todas as chamadas do frontend antes de fazer deploy`);
  console.log(`   4. TESTAR autentica√ß√£o em todos os endpoints protegidos`);
  console.log(`   5. IMPLEMENTAR logs detalhados para facilitar debugging`);
  console.log(`   6. CRIAR testes automatizados para prevenir regress√µes`);
  
  // Status final
  console.log(`\nüèÜ STATUS FINAL:`);
  if (overallSuccessRate >= 90) {
    console.log(`   üü¢ EXCELENTE - Sistema funcionando muito bem`);
  } else if (overallSuccessRate >= 80) {
    console.log(`   üü° BOM - Pequenos ajustes necess√°rios`);
  } else if (overallSuccessRate >= 70) {
    console.log(`   üü† REGULAR - Melhorias importantes necess√°rias`);
  } else {
    console.log(`   üî¥ CR√çTICO - Corre√ß√µes urgentes necess√°rias`);
  }
  
  console.log(`\nüéØ PR√ìXIMOS PASSOS RECOMENDADOS:`);
  console.log(`   1. Corrigir problemas identificados nesta an√°lise`);
  console.log(`   2. Implementar testes automatizados`);
  console.log(`   3. Criar documenta√ß√£o de API atualizada`);
  console.log(`   4. Estabelecer processo de deploy mais seguro`);
  console.log(`   5. Implementar monitoramento cont√≠nuo`);
}

// =====================================================
// FUN√á√ÉO PRINCIPAL DE AN√ÅLISE
// =====================================================

async function runLearningAnalysis() {
  console.log('üß† INICIANDO AN√ÅLISE DE APRENDIZADO E VERIFICA√á√ÉO DE ERROS');
  console.log('='.repeat(80));
  console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
  console.log(`üåê Backend: ${BASE_URL}`);
  console.log(`üë§ Usu√°rio de Teste: ${TEST_USER_EMAIL}`);
  console.log('='.repeat(80));
  
  const startTime = Date.now();
  
  try {
    // Executar todas as fases de an√°lise
    await testRouteCompatibility();
    await testAuthentication();
    await testDataConsistency();
    await testIntegrationFlow();
    
    // An√°lise final e recomenda√ß√µes
    analyzeLearningAndRecommendations();
    
  } catch (error) {
    console.error('‚ùå [AN√ÅLISE] Erro cr√≠tico durante an√°lise:', error.message);
  }
  
  const totalTime = Date.now() - startTime;
  console.log(`\n‚è±Ô∏è Tempo total de an√°lise: ${Math.round(totalTime / 1000)}s`);
  console.log('\nüèÜ AN√ÅLISE DE APRENDIZADO CONCLU√çDA!');
  console.log('='.repeat(80));
}

// Executar an√°lise
runLearningAnalysis().catch(console.error);
